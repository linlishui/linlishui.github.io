[{"content":"概述 Shell 是操作系统的命令行解释器，是用户与操作系统内核交互的接口。常见的 Shell 类型包括：\nBash：Linux 默认 Shell，功能丰富 Zsh：增强版 Shell，支持更多特性 入门 shell脚本基本结构\n#!/bin/bash # 脚本注释 echo \u0026#34;Hello World\u0026#34; 参数 脚本参数小知识\n#!/bin/bash # 1. 位置参数 ## 脚本名: script.sh echo \u0026#34;脚本名称: $0\u0026#34; echo \u0026#34;第一个参数: $1\u0026#34; echo \u0026#34;第二个参数: $2\u0026#34; echo \u0026#34;第三个参数: $3\u0026#34; ## 使用方式: ./script.sh arg1 arg2 arg3 # 2. 特殊参数变量 echo \u0026#34;参数总数: $#\u0026#34; echo \u0026#34;所有参数(作为单个字符串): $*\u0026#34; echo \u0026#34;所有参数(作为独立字符串): $@\u0026#34; echo \u0026#34;脚本进程ID: $$\u0026#34; echo \u0026#34;上一个命令退出状态: $?\u0026#34; # 3. 参数检查 if [ $# -eq 0 ]; then echo \u0026#34;用法: $0 \u0026lt;文件名\u0026gt; [选项]\u0026#34; exit 1 fi if [ $# -lt 2 ]; then echo \u0026#34;错误: 需要至少2个参数\u0026#34; exit 1 fi # 4. 参数默认值 filename=${1:-\u0026#34;default.txt\u0026#34;} action=${2:-\u0026#34;read\u0026#34;} verbose=${3:-\u0026#34;false\u0026#34;} echo \u0026#34;文件名: $filename\u0026#34; echo \u0026#34;操作: $action\u0026#34; echo \u0026#34;详细模式: $verbose\u0026#34; 变量 变量操作\n# 变量定义(等号两边不能有空格) name=\u0026#34;张三\u0026#34; age=25 # 变量使用（推进用大括号方式） echo \u0026#34;姓名: $name, 年龄: ${age}岁\u0026#34; # 变量作用域 global_var=\u0026#34;全局变量\u0026#34; function test_scope() { local local_var=\u0026#34;局部变量\u0026#34; global_var=\u0026#34;修改后的全局变量\u0026#34; echo \u0026#34;函数内: $local_var\u0026#34; } test_scope echo \u0026#34;函数外: $global_var\u0026#34; ## echo \u0026#34;$local_var\u0026#34; # 错误：局部变量不可访问 # 命令替换说明 ## 方法1：$() 推荐使用，支持嵌套 current_date=$(date) file_count=$(ls -1 | wc -l) nested_result=$(echo \u0026#34;当前目录文件数: $(ls | wc -l)\u0026#34;) ## 方法2：反引号`` 传统方式，不支持嵌套 old_style=`date` ## 实际应用示例 backup_name=\u0026#34;backup_$(date +%Y%m%d_%H%M%S).tar.gz\u0026#34; echo \u0026#34;备份文件名: $backup_name\u0026#34; 条件判断 数值比较操作符\nnum1=10 num2=20 # 数值比较 if [ $num1 -eq $num2 ]; then echo \u0026#34;相等\u0026#34;; fi if [ $num1 -ne $num2 ]; then echo \u0026#34;不相等\u0026#34;; fi if [ $num1 -lt $num2 ]; then echo \u0026#34;$num1 小于 $num2\u0026#34;; fi if [ $num1 -le $num2 ]; then echo \u0026#34;$num1 小于等于 $num2\u0026#34;; fi if [ $num1 -gt $num2 ]; then echo \u0026#34;$num1 大于 $num2\u0026#34;; fi if [ $num1 -ge $num2 ]; then echo \u0026#34;$num1 大于等于 $num2\u0026#34;; fi # if-elif-else if [ $age -gt 18 ]; then echo \u0026#34;成年人\u0026#34; elif [ $age -eq 18 ]; then echo \u0026#34;刚好18岁\u0026#34; else echo \u0026#34;未成年\u0026#34; fi 文件操作操作符\nfile_path=\u0026#34;/path/to/file.txt\u0026#34; # 文件存在判断 if [ -f \u0026#34;$file_path\u0026#34; ]; then echo \u0026#34;文件存在\u0026#34; else echo \u0026#34;文件不存在\u0026#34; fi # 目录判断 if [ -d \u0026#34;/path/to/directory\u0026#34; ]; then echo \u0026#34;目录存在\u0026#34; fi # 文件可读写判断 if [ -r \u0026#34;$file_path\u0026#34; ]; then echo \u0026#34;文件可读\u0026#34; fi if [ -w \u0026#34;$file_path\u0026#34; ]; then echo \u0026#34;文件可写\u0026#34; fi # 文件非空判断 if [ -s \u0026#34;$file_path\u0026#34; ]; then echo \u0026#34;文件非空\u0026#34; else echo \u0026#34;文件为空或不存在\u0026#34; fi 循环结构 算数运算解释\n# 为什么使用 ((count++))？ count=1 # 方法1：((表达式)) - 算术扩展，支持C风格运算 ((count++)) # count = count + 1 ((count += 2)) # count = count + 2 ((count *= 3)) # count = count * 3 # 方法2：$((表达式)) - 算术替换 count=$((count + 1)) new_value=$((count * 2)) # 方法3：let命令 let count++ let \u0026#34;count += 5\u0026#34; # 方法4：expr命令（较老的方式） count=$(expr $count + 1) 循环实例详解\n# for循环的多种形式 # 1. 数字序列 for i in {1..10}; do echo \u0026#34;数字: $i\u0026#34; done # 2. 带步长的序列 for i in {1..20..2}; do # 1到20，步长为2 echo \u0026#34;奇数: $i\u0026#34; done # 3. 数组遍历 fruits=(\u0026#34;苹果\u0026#34; \u0026#34;香蕉\u0026#34; \u0026#34;橙子\u0026#34;) for fruit in \u0026#34;${fruits[@]}\u0026#34;; do echo \u0026#34;水果: $fruit\u0026#34; done # 4. 文件遍历 for file in *.txt; do if [ -f \u0026#34;$file\u0026#34; ]; then echo \u0026#34;处理文件: $file\u0026#34; fi done # C风格for循环 for ((i=1; i\u0026lt;=5; i++)); do echo \u0026#34;C风格循环: $i\u0026#34; done 函数 函数定义\nfunction greet() { local name=$1 echo \u0026#34;你好, $name!\u0026#34; } greet \u0026#34;开发者\u0026#34; 带参数和返回值的函数\n# 函数定义方式1 function calculate_sum() { local num1=$1 # 第一个参数 local num2=$2 # 第二个参数 local result=$((num1 + num2)) echo \u0026#34;计算 $num1 + $num2 = $result\u0026#34; return $result # 返回值（0-255） } # 函数定义方式2 multiply() { local a=$1 local b=$2 echo $((a * b)) # 通过echo返回结果 } # 函数调用和返回值处理 calculate_sum 10 20 sum_result=$? # 获取return的返回值 product_result=$(multiply 6 7) # 获取echo的输出 echo \u0026#34;乘积结果: $product_result\u0026#34; # 处理多个参数 process_files() { echo \u0026#34;参数个数: $#\u0026#34; echo \u0026#34;所有参数: $@\u0026#34; echo \u0026#34;脚本名: $0\u0026#34; for arg in \u0026#34;$@\u0026#34;; do echo \u0026#34;处理参数: $arg\u0026#34; done } process_files file1.txt file2.txt file3.txt 函数返回字符串的技巧\nget_user_info() { local username=$1 local user_info=\u0026#34;用户名:${username},状态:在线,权限:管理员\u0026#34; echo \u0026#34;$user_info\u0026#34; # 通过echo返回字符串 } # 使用函数返回的字符串 user_data=$(get_user_info \u0026#34;admin\u0026#34;) echo \u0026#34;用户信息: $user_data\u0026#34; 文件操作 文件读取的多种方式\n# 方法1：while read逐行读取 read_file_line_by_line() { local filename=$1 local line_number=1 if [ ! -f \u0026#34;$filename\u0026#34; ]; then echo \u0026#34;错误: 文件 $filename 不存在\u0026#34; return 1 fi while IFS= read -r line; do echo \u0026#34;第${line_number}行: $line\u0026#34; ((line_number++)) done \u0026lt; \u0026#34;$filename\u0026#34; } # 方法2：读取到数组 read_file_to_array() { local filename=$1 local -a file_lines=() while IFS= read -r line; do file_lines+=(\u0026#34;$line\u0026#34;) done \u0026lt; \u0026#34;$filename\u0026#34; echo \u0026#34;文件共 ${#file_lines[@]} 行\u0026#34; for i in \u0026#34;${!file_lines[@]}\u0026#34;; do echo \u0026#34;行$((i+1)): ${file_lines[i]}\u0026#34; done } # 方法3：处理CSV文件 process_csv() { local csv_file=$1 local line_num=0 while IFS=\u0026#39;,\u0026#39; read -r col1 col2 col3; do ((line_num++)) if [ $line_num -eq 1 ]; then echo \u0026#34;表头: $col1 | $col2 | $col3\u0026#34; else echo \u0026#34;数据: $col1 | $col2 | $col3\u0026#34; fi done \u0026lt; \u0026#34;$csv_file\u0026#34; } # 使用示例 echo -e \u0026#34;姓名,年龄,城市\\n张三,25,北京\\n李四,30,上海\u0026#34; \u0026gt; sample.csv process_csv \u0026#34;sample.csv\u0026#34; 文件写入操作\n# 文件写入示例 write_log() { local message=$1 local log_file=\u0026#34;application.log\u0026#34; local timestamp=$(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;) # 追加写入 echo \u0026#34;[$timestamp] $message\u0026#34; \u0026gt;\u0026gt; \u0026#34;$log_file\u0026#34; # 覆盖写入 # echo \u0026#34;[$timestamp] $message\u0026#34; \u0026gt; \u0026#34;$log_file\u0026#34; } # 创建配置文件 create_config() { local config_file=\u0026#34;app.conf\u0026#34; cat \u0026gt; \u0026#34;$config_file\u0026#34; \u0026lt;\u0026lt; EOF # 应用配置文件 app_name=MyApp version=1.0.0 debug=true port=8080 EOF echo \u0026#34;配置文件 $config_file 创建完成\u0026#34; } 文件操作实用函数\n# 安全的文件操作函数 safe_file_operation() { local source_file=$1 local operation=$2 # 检查文件是否存在 if [ ! -f \u0026#34;$source_file\u0026#34; ]; then echo \u0026#34;错误: 源文件 $source_file 不存在\u0026#34; return 1 fi # 检查文件是否可读 if [ ! -r \u0026#34;$source_file\u0026#34; ]; then echo \u0026#34;错误: 文件 $source_file 不可读\u0026#34; return 2 fi case $operation in \u0026#34;backup\u0026#34;) local backup_file=\u0026#34;${source_file}.bak.$(date +%Y%m%d)\u0026#34; cp \u0026#34;$source_file\u0026#34; \u0026#34;$backup_file\u0026#34; echo \u0026#34;备份完成: $backup_file\u0026#34; ;; \u0026#34;size\u0026#34;) local file_size=$(stat -f%z \u0026#34;$source_file\u0026#34; 2\u0026gt;/dev/null || stat -c%s \u0026#34;$source_file\u0026#34; 2\u0026gt;/dev/null) echo \u0026#34;文件大小: $file_size 字节\u0026#34; ;; *) echo \u0026#34;不支持的操作: $operation\u0026#34; return 3 ;; esac } # 使用示例 safe_file_operation \u0026#34;sample.csv\u0026#34; \u0026#34;backup\u0026#34; safe_file_operation \u0026#34;sample.csv\u0026#34; \u0026#34;size\u0026#34; ","permalink":"/posts/tools/shell/","summary":"\u003ch2 id=\"概述\"\u003e概述\u003c/h2\u003e\n\u003cp\u003eShell 是操作系统的命令行解释器，是用户与操作系统内核交互的接口。常见的 Shell 类型包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBash：Linux 默认 Shell，功能丰富\u003c/li\u003e\n\u003cli\u003eZsh：增强版 Shell，支持更多特性\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"入门\"\u003e入门\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eshell脚本基本结构\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# 脚本注释\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"参数\"\u003e参数\u003c/h3\u003e\n\u003cp\u003e脚本参数小知识\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 1. 位置参数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e## 脚本名: script.sh\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;脚本名称: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;第一个参数: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;第二个参数: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$2\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;第三个参数: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$3\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e## 使用方式: ./script.sh arg1 arg2 arg3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 2. 特殊参数变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;参数总数: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$#\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;所有参数(作为单个字符串): \u003c/span\u003e\u003cspan class=\"nv\"\u003e$*\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;所有参数(作为独立字符串): \u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;脚本进程ID: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$$\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;上一个命令退出状态: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$?\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 3. 参数检查\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$#\u003c/span\u003e -eq \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;用法: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$0\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u0026lt;文件名\u0026gt; [选项]\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$#\u003c/span\u003e -lt \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;错误: 需要至少2个参数\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 4. 参数默认值\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003efilename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003e1\u003c/span\u003e\u003cspan class=\"k\"\u003e:-\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;default.txt\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eaction\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003e2\u003c/span\u003e\u003cspan class=\"k\"\u003e:-\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;read\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003everbose\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003e3\u003c/span\u003e\u003cspan class=\"k\"\u003e:-\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;false\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;文件名: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$filename\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;操作: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$action\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;详细模式: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$verbose\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"变量\"\u003e变量\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e变量操作\u003c/strong\u003e\u003c/p\u003e","title":"Shell入门"},{"content":"Vim基本操作 1. 移动光标 键位 含义 hjkl，方向键 移动一位，hjkl代表左、下、上、右 数字0 移至本行开头 ^ 移至本行第一个非空字符，匹配开头 $ 移至本行结尾，可以包含空格 w 移至下一单词或标点的开头 b 移至上一单词或标点开头 ctrl-f/PgDn 下翻一页 ctrl-b/PgUp 上翻一页 nG 移至第n行（n为数字） gg 光标移至第一行 G 光标移至最后一行 :n enter键 移至第n行 n+ 向下跳n行 n- 向上跳n行 H 移至当前屏幕的第一行 L 移至当前屏幕的最后一行 注意：许多vi的命令前面都可以缀上数字，前缀数字可以控制该命令执行的次数，比如5j可以使得光标向下移动5行\n2. 基本编辑 键位 含义 a 在当前字符后插入文本 A 在行尾插入文本 i 在当前字符前插入文本 I 在行首插入文本 o 当前行下方插入新行并进入插入模式 O 当前行上方插入新行并进入插入模式 3. 删除和撤销 键位 含义 x 删除当前字符（剪切） nx 向后删除当前行在内的n个字符（剪切） dd 删除（剪切）当前行 ndd 向下删除当前行在内的n行（剪切） u 撤销上一次操作 nu 撤销n次操作 U 撤销对当前行的所有操作 结合光标移动以及这里的删除和撤销，可以组合命令。如：dG，代表删除当前行到文件末尾（剪切）\n4. 剪切、复制和粘贴 x和d键实质上是剪切键，两者功能略有差异。y是复制键，p是粘贴键\n键位 含义 yy 复制当前行 nyy 向下复制当前行在内的n行 小写p 粘贴到当前字符（行）后面（下方） 大写P 粘贴到当前字符（行）前面（上方） 大写J 合并当前行和下一行为一行 R 替换模式，和windows下的insert模式差不多 小写v 进入选择模式（VISUAL），可以利用方向键选择字符，然后x、d剪切或者y复制 5. 查找和替换 键位 含义 fx（当前行内查找） 光标移至本行下一处出现字符x的位置，输入分号：重复上一次搜索 /keyword 向光标下搜索字符串，按enter执行 ?keyword 向光标上搜索keyword字符串 :noh 去除搜索后的高亮显示 :set hlsearch 设置搜索结果高亮显示 :set ignorecase 设置搜索忽略大小写 :s/old/new 用new替换行中首次出现的old（:分号用于启动一条ex命令） :s/old/new/g 用new替换行中所有的old :n,m s/old/new/g 用new替换从n到m行里所有的old :%s/old/new/g 用new替换当前文件里所有的old 6. 保存工作 键位 含义 :w 仅保存文件 :q 退出文件，没有修改 :q! 放弃修改并退出文件 :wq 保存并退出文件 :w file1 文件另存为file1 ZZ 保存并退出文件 可以通过ctrl+z挂起vim，然后需要进入的时候输入“fg”回到vim\n7. 其他操作 键位 含义 :!{command} 执行shell命令 :set all 列表所有选项 :set nu 显示行号 :set nonu 取消显示行号 :set list 显示制表位(Ctrl+I)和行尾标志（$) 高级操作 1. 读取二进制文件 可以通过下面方式查看并修改二进制文件：\n打开二进制文件：vim -b [target_file] 以十六进制查看： :%!xxd 恢复之前的进制：:%!xxd -r Vim键位图 ","permalink":"/posts/tools/vim/","summary":"\u003ch3 id=\"vim基本操作\"\u003eVim基本操作\u003c/h3\u003e\n\u003ch4 id=\"1-移动光标\"\u003e1. 移动光标\u003c/h4\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e键位\u003c/th\u003e\n          \u003cth\u003e含义\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ehjkl，方向键\u003c/td\u003e\n          \u003ctd\u003e移动一位，hjkl代表左、下、上、右\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e数字0\u003c/td\u003e\n          \u003ctd\u003e移至本行开头\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e^\u003c/td\u003e\n          \u003ctd\u003e移至本行第一个非空字符，匹配开头\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e$\u003c/td\u003e\n          \u003ctd\u003e移至本行结尾，可以包含空格\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ew\u003c/td\u003e\n          \u003ctd\u003e移至下一单词或标点的开头\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eb\u003c/td\u003e\n          \u003ctd\u003e移至上一单词或标点开头\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ectrl-f/PgDn\u003c/td\u003e\n          \u003ctd\u003e下翻一页\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ectrl-b/PgUp\u003c/td\u003e\n          \u003ctd\u003e上翻一页\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003enG\u003c/td\u003e\n          \u003ctd\u003e移至第n行（n为数字）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003egg\u003c/td\u003e\n          \u003ctd\u003e光标移至第一行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eG\u003c/td\u003e\n          \u003ctd\u003e光标移至最后一行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003e:n  enter键\u003c/td\u003e\n          \u003ctd\u003e移至第n行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003en+\u003c/td\u003e\n          \u003ctd\u003e向下跳n行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003en-\u003c/td\u003e\n          \u003ctd\u003e向上跳n行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eH\u003c/td\u003e\n          \u003ctd\u003e移至当前屏幕的第一行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eL\u003c/td\u003e\n          \u003ctd\u003e移至当前屏幕的最后一行\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：许多vi的命令前面都可以缀上数字，前缀数字可以控制该命令执行的次数，比如5j可以使得光标向下移动5行\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"2-基本编辑\"\u003e2. 基本编辑\u003c/h4\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e键位\u003c/th\u003e\n          \u003cth\u003e含义\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ea\u003c/td\u003e\n          \u003ctd\u003e在当前字符后插入文本\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eA\u003c/td\u003e\n          \u003ctd\u003e在行尾插入文本\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ei\u003c/td\u003e\n          \u003ctd\u003e在当前字符前插入文本\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eI\u003c/td\u003e\n          \u003ctd\u003e在行首插入文本\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eo\u003c/td\u003e\n          \u003ctd\u003e当前行下方插入新行并进入插入模式\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eO\u003c/td\u003e\n          \u003ctd\u003e当前行上方插入新行并进入插入模式\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id=\"3-删除和撤销\"\u003e3. 删除和撤销\u003c/h4\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e键位\u003c/th\u003e\n          \u003cth\u003e含义\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003ex\u003c/td\u003e\n          \u003ctd\u003e删除当前字符（剪切）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003enx\u003c/td\u003e\n          \u003ctd\u003e向后删除当前行在内的n个字符（剪切）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003edd\u003c/td\u003e\n          \u003ctd\u003e删除（剪切）当前行\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003endd\u003c/td\u003e\n          \u003ctd\u003e向下删除当前行在内的n行（剪切）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eu\u003c/td\u003e\n          \u003ctd\u003e撤销上一次操作\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003enu\u003c/td\u003e\n          \u003ctd\u003e撤销n次操作\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eU\u003c/td\u003e\n          \u003ctd\u003e撤销对当前行的所有操作\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp\u003e结合光标移动以及这里的删除和撤销，可以组合命令。如：dG，代表删除当前行到文件末尾（剪切）\u003c/p\u003e","title":"Vim基础使用"},{"content":"NestedScrollingChild 1. 接口版本对比 接口名称 引入版本 核心改进 NestedScrollingChild Support 23.1 基础嵌套滚动功能 NestedScrollingChild2 Support 25.0 增加滚动类型（Touch/Fling）区分 NestedScrollingChild3 AndroidX 支持 NestedScrollingParent3 的扩展方法 2. 接口方法列表 NestedScrollingChild接口方法：\npublic interface NestedScrollingChild { // 启用/禁用嵌套滚动 void setNestedScrollingEnabled(boolean enabled); boolean isNestedScrollingEnabled(); // 启动/停止嵌套滚动 boolean startNestedScroll(@ScrollAxis int axes); void stopNestedScroll(); // 检查是否存在嵌套滚动父级 boolean hasNestedScrollingParent(); // 分发滚动事件 boolean dispatchNestedPreScroll(int dx, int dy, @Nullable int[] consumed, @Nullable int[] offsetInWindow); boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow); // 处理惯性滚动 boolean dispatchNestedPreFling(float velocityX, float velocityY); boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed); } NestedScrollingChild2接口方法：\npublic interface NestedScrollingChild2 extends NestedScrollingChild { // 新增 type 参数（TYPE_TOUCH / TYPE_NON_TOUCH） boolean startNestedScroll(@ScrollAxis int axes, @NestedScrollType int type); void stopNestedScroll(@NestedScrollType int type); boolean hasNestedScrollingParent(@NestedScrollType int type); boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow, @NestedScrollType int type); boolean dispatchNestedPreScroll(int dx, int dy, @Nullable int[] consumed, @Nullable int[] offsetInWindow, @NestedScrollType int type); } NestedScrollingChild3接口方法：\npublic interface NestedScrollingChild3 extends NestedScrollingChild2 { // 新增consumed参数，适配 NestedScrollingParent3 void dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow, @ViewCompat.NestedScrollType int type, @NonNull int[] consumed); } 3. 关键实现说明 核心方法解析\n方法名 作用说明 参数说明 startNestedScroll() 启动嵌套滚动流程 axes: 滚动方向（SCROLL_AXIS_VERTICAL/HORIZONTAL） type: 滚动类型（Touch/Fling） dispatchNestedPreScroll() 分发预滚动事件给父容器 dx/dy: 滚动增量 consumed: 父容器消费量 type: 滚动类型 dispatchNestedScroll() 分发剩余滚动事件给父容器 dxConsumed/dyConsumed: 已消费量 dxUnconsumed/dyUnconsumed: 未消费量 dispatchNestedFling() 处理惯性滚动事件 velocityX/Y: 滑动速度 滚动类型（type）\n类型常量 值 说明 ViewCompat.TYPE_TOUCH 0 由触摸触发的滚动（手指拖动） ViewCompat.TYPE_NON_TOUCH 1 由惯性触发的滚动（Fling 效果） 与父容器的交互流程\nsequenceDiagram participant Child participant Parent Child-\u003e\u003eParent: startNestedScroll(axes, type) Parent--\u003e\u003eChild: 是否接受滚动 loop 滚动处理 Child-\u003e\u003eParent: dispatchNestedPreScroll(dx, dy, type) Parent-\u003e\u003eParent: 消费部分滚动量 Parent--\u003e\u003eChild: 返回已消费量 Child-\u003e\u003eChild: 自身滚动剩余量 Child-\u003e\u003eParent: dispatchNestedScroll(..., type) end Child-\u003e\u003eParent: stopNestedScroll(type) NestedScrollingParent 1. 接口版本对比 接口名称 引入版本 核心改进 NestedScrollingParent Support 23.1 基础嵌套滚动功能 NestedScrollingParent2 Support 25.0 增加滚动类型（Touch/Fling）区分 NestedScrollingParent3 AndroidX 新增 onNestedScroll 的扩展参数，支持更精细的未消费滚动量处理 2. 接口方法列表 NestedScrollingParent 接口方法：\npublic interface NestedScrollingParent { // 是否响应子类嵌套滑动请求 boolean onStartNestedScroll(@NonNull View child, @NonNull View target, @ScrollAxis int axes); // 同意响应的滑动回调 void onNestedScrollAccepted(@NonNull View child, @NonNull View target, @ScrollAxis int axes); // 嵌套滑动停止回调 void onStopNestedScroll(@NonNull View target); // 预滑动的嵌套处理 void onNestedPreScroll(@NonNull View target, int dx, int dy, @NonNull int[] consumed); // 滑动的嵌套处理 void onNestedScroll(@NonNull View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed); // 惯性滑动处理 boolean onNestedPreFling(@NonNull View target, float velocityX, float velocityY); boolean onNestedFling(@NonNull View target, float velocityX, float velocityY, boolean consumed); // 返回当前滑动的方向 @ScrollAxis int getNestedScrollAxes(); } NestedScrollingParent2 接口方法：\npublic interface NestedScrollingParent2 extends NestedScrollingParent { // 新增 type 参数（TYPE_TOUCH / TYPE_NON_TOUCH） boolean onStartNestedScroll(@NonNull View child, @NonNull View target, @ScrollAxis int axes, @NestedScrollType int type); void onNestedScrollAccepted(@NonNull View child, @NonNull View target, @ScrollAxis int axes, @NestedScrollType int type); void onStopNestedScroll(@NonNull View target, @NestedScrollType int type); void onNestedPreScroll(@NonNull View target, int dx, int dy, @NonNull int[] consumed, @NestedScrollType int type); void onNestedScroll(@NonNull View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @NestedScrollType int type); } NestedScrollingParent3 接口方法：\npublic interface NestedScrollingParent3 extends NestedScrollingParent2 { // 扩展 onNestedScroll 方法：新增consumed参数 void onNestedScroll(@NonNull View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @ViewCompat.NestedScrollType int type, @NonNull int[] consumed); } 3. 关键实现说明 核心方法解析\n方法名 调用时机 典型实现逻辑 onStartNestedScroll() 子视图开始滚动时 返回 true 表示父容器需要处理该方向的滚动 onNestedPreScroll() 子视图自身滚动前 父容器优先消费部分滚动量（如收起头部） onNestedScroll() 子视图完成自身滚动后 处理子视图未消费的滚动量（如展开头部） onStopNestedScroll() 滚动完全结束（包括惯性滚动） 清理滚动状态 onNestedPreFling() 子视图触发惯性滚动前 父容器决定是否消费惯性（如快速折叠头部） onNestedFling() 子视图处理惯性滚动时 父容器补充处理惯性滚动（如展开头部动画） 滚动类型（type）\n类型常量 值 说明 ViewCompat.TYPE_TOUCH 0 由触摸触发的滚动（手指拖动） ViewCompat.TYPE_NON_TOUCH 1 由惯性触发的滚动（Fling 效果） 简要流程小结 以下是嵌套滑动机制的核心方法流转示意图，使用Mermaid语法表示：\nsequenceDiagram autonumber participant Child as 子视图 (NestedScrollingChild3) participant Parent as 父容器 (NestedScrollingParent3) Note over Child, Parent: 1. 启动嵌套滚动 Child-\u003e\u003eParent: startNestedScroll(axes, type) activate Parent Parent--\u003e\u003eChild: onStartNestedScroll() 返回 true Parent-\u003e\u003eParent: onNestedScrollAccepted() deactivate Parent loop 滚动处理循环 Note over Child, Parent: 2. 预滚动阶段 (父容器优先消费) Child-\u003e\u003eParent: dispatchNestedPreScroll(dx, dy, type) activate Parent Parent-\u003e\u003eParent: onNestedPreScroll(dx, dy, consumed, type) Parent--\u003e\u003eChild: 返回 consumed 值 deactivate Parent Note over Child, Parent: 3. 子视图自身滚动 alt 有剩余未消费量 (remainingDy ≠ 0) Child-\u003e\u003eChild: 自身滚动处理(remainingDy) end Note over Child, Parent: 4. 剩余滚动量处理 Child-\u003e\u003eParent: dispatchNestedScroll(dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, type) activate Parent Parent-\u003e\u003eParent: onNestedScroll(... type, consumed) deactivate Parent end Note over Child, Parent: 5. 结束滚动 Child-\u003e\u003eParent: stopNestedScroll(type) activate Parent Parent-\u003e\u003eParent: onStopNestedScroll(type) deactivate Parent Note over Child, Parent: 6. 惯性滚动处理（可选） alt 存在惯性滚动 Child-\u003e\u003eParent: dispatchNestedFling(velocityX, velocityY) activate Parent Parent-\u003e\u003eParent: onNestedPreFling() / onNestedFling() deactivate Parent end ","permalink":"/posts/android/nested_scroll_basic/","summary":"\u003ch3 id=\"nestedscrollingchild\"\u003eNestedScrollingChild\u003c/h3\u003e\n\u003ch4 id=\"1-接口版本对比\"\u003e1. 接口版本对比\u003c/h4\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e接口名称\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e引入版本\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e核心改进\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eNestedScrollingChild\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSupport 23.1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e基础嵌套滚动功能\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eNestedScrollingChild2\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSupport 25.0\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e增加滚动类型（Touch/Fling）区分\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eNestedScrollingChild3\u003c/code\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAndroidX\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e支持 \u003ccode\u003eNestedScrollingParent3\u003c/code\u003e 的扩展方法\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id=\"2-接口方法列表\"\u003e2. 接口方法列表\u003c/h4\u003e\n\u003cp\u003eNestedScrollingChild接口方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"nc\"\u003eNestedScrollingChild\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 启用/禁用嵌套滚动\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esetNestedScrollingEnabled\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eenabled\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eisNestedScrollingEnabled\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 启动/停止嵌套滚动\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003estartNestedScroll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nd\"\u003e@ScrollAxis\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eaxes\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003estopNestedScroll\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 检查是否存在嵌套滚动父级\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ehasNestedScrollingParent\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 分发滚动事件\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003edispatchNestedPreScroll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edy\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Nullable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econsumed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Nullable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoffsetInWindow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003edispatchNestedScroll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edxConsumed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edyConsumed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edxUnconsumed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edyUnconsumed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Nullable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eoffsetInWindow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 处理惯性滚动\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003edispatchNestedPreFling\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evelocityX\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evelocityY\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003edispatchNestedFling\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evelocityX\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evelocityY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econsumed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNestedScrollingChild2接口方法：\u003c/p\u003e","title":"NestedScrolling机制基础篇"},{"content":"概述 在Android的知识体系中，View扮演着很重要的角色，简单来理解，View是Android里Window的表现形式。\nViewRootImpl在整个View体系中起着中流砥柱的作用，它是控件树正常运作的动力所在，主要功能有：\n连接WindowManager和DecorView的纽带； 向DecorView分发输入事件； 完成View的绘制(measure，layout，draw)； 负责与WMS交互通信，调整窗口大小及布局。 View工作流程 1. ViewRootImpl.setView 在WindowManagerGlobal.addView方法中，会创建ViewRootImpl对象，并通过setView方法将DecorView对象和WindowManager.LayoutParams等参数传入。View流程相关的代码如下：\npublic void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) { ... mView = view; mWindowAttributes.copyFrom(attrs); ... mAdded = true; requestLayout(); ... } 通过内部的requestLayout()方法开启View的工作流程。\n2. ViewRootImpl.requestLayout @Override public void requestLayout() { if (!mHandlingLayoutInLayoutRequest) { // 检查线程对象，调用方若不在当前ViewRootImpl线程将会出错 checkThread(); mLayoutRequested = true; // 计划执行遍历任务 scheduleTraversals(); } } void checkThread() { if (mThread != Thread.currentThread()) { throw new CalledFromWrongThreadException( \u0026#34;Only the original thread that created a view hierarchy\u0026#34; + \u0026#34;can touch its views.\u0026#34;); } } 这里需要说明的是，View的工作流程是在创建ViewRootImpl的线程中运行的，而ViewRootImpl是在主线程被创建的！\n3. ViewRootImpl.scheduleTraversals Choreographer mChoreographer; void scheduleTraversals() { if (!mTraversalScheduled) { mTraversalScheduled = true; // 同步屏障，此时同步消息将不被执行，但异步消息照常处理 mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier(); // Choreographer协调显示处理，执行mTraversalRunnable任务 mChoreographer.postCallback( Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null); ... } } 4. TraversalRunnable public final class ViewRootImpl ...{ final class TraversalRunnable implements Runnable { @Override public void run() { doTraversal(); } } final TraversalRunnable mTraversalRunnable = new TraversalRunnable(); } TraversalRunnable这个任务只执行了ViewRootImpl的doTraversal方法\n5. ViewRootImpl.doTraversal void doTraversal() { if (mTraversalScheduled) { mTraversalScheduled = false; // 移除同步屏障 mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier); // 开始执行遍历操作 performTraversals(); } } 简而言之，通过Choreographer.postCallback方法执行TraversalRunnable任务中的doTraversal方法。\n6. ViewRootImpl.performTraversals private void performTraversals() { final View host = mView; mIsInTraversal = true; mWillDrawSoon = true; boolean windowSizeMayChange = false; boolean newSurface = false; boolean surfaceChanged = false; WindowManager.LayoutParams lp = mWindowAttributes; ... if (!mStopped || mReportNextDraw) { int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width); int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height); // 执行measure操作 performMeasure(childWidthMeasureSpec, childHeightMeasureSpec); ... layoutRequested = true; } final boolean didLayout = layoutRequested \u0026amp;\u0026amp; (!mStopped || mReportNextDraw); if (didLayout) { // 执行layout操作 performLayout(lp, mWidth, mHeight); ... } // Remember if we must report the next draw. if ((relayoutResult \u0026amp; WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME) != 0) { reportNextDraw(); } boolean cancelDraw = mAttachInfo.mTreeObserver.dispatchOnPreDraw() || !isViewVisible; if (!cancelDraw \u0026amp;\u0026amp; !newSurface) { ... // 执行draw操作 performDraw(); } // 遍历结束 mIsInTraversal = false; } View的测量过程 1. ViewRootImpl.performMeasure private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) { ... mView.measure(childWidthMeasureSpec, childHeightMeasureSpec); ... } 这个方法直接调用了mView.measure方法，mView是DecorView，但是measure是View的final方法，不可继承重写，所以接着调用了View.measure方法。\n2. View.measure public final void measure(int widthMeasureSpec, int heightMeasureSpec) { ... if (forceLayout || needsLayout) { ... onMeasure(widthMeasureSpec, heightMeasureSpec); ... } ... } protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { setMeasuredDimension( getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec), getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec)); } // setMeasuredDimension方法里会继续调用setMeasuredDimensionRaw完成赋值 private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) { mMeasuredWidth = measuredWidth; mMeasuredHeight = measuredHeight; mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET; } measure方法中会调用onMeasure方法，onMeasure方法是可以被重写的，默认实现中只是调用了setMeasuredDimension方法设置测量值！\n3. MeasureSpec MeasureSpec代表一个32位的int值，高2位代表SpecMode (EXACTLY, AT_MOST, UNSPECIFIED)，低30位代表SpecSize值。具体关系表如下：\nchildLayoutParams\\parentLayoutParams EXACTLY AT_MOST UNSPECIFIED dp/px EXACTLY (childSize) EXACTLY (childSize) EXACTLY (childSize) match_parent EXACTLY (parentSize) AT_MOST (parentSize) UNSPECIFIED (0) wrap_content AT_MOST (parentSize) AT_MOST (parentSize) UNSPECIFIED (0) MeasureSpec和LayoutParams的对应关系\n对应DecorView，其MeasureSpec由窗口的尺寸和其自身的LayoutParams来共同确定 对应普通的View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams共同决定，同时考虑View的margin及padding的因素 获取SpecMode和SpecSize：MeasureSpec.getMode(measureSpec); MeasureSpec.getSize(measureSpec); 组装MeasureSpec: MeasureSpec.makeMeasureSpec(int size, int SpecMode) 测量模式一共有三种， 在 Android 中 View 内定义的一个内部类View.MeasureSpec中：\n模式 二进制数值 描述 UNSPECIFIED 0 \u0026laquo; MODE_SHIFT 默认值，父控件没有给子view任何限制，子View可以设置为任意大小。 EXACTLY 1 \u0026laquo; MODE_SHIFT 父控件确切地指定子View的大小。match_parent、具体数值对应的都是这个模式。 AT_MOST 2 \u0026laquo; MODE_SHIFT 子View具体大小没有限制，但上限一般为父View大小。wrap_content对应这种模式 4. 小结 View的测量过程，主要核心点在于View.measure方法中调用的onMeasure方法，在onMeasure方法中会通过setMeasuredDimension方法完成View的最终测量。\n这里分为两种情况：\n当为ViewGroup时，需要一并考虑各个子View的占用大小和其padding值，算出最终占用大小 当为View时，考虑父容器的测量模式，在onMeasure方法中处理自身占用大小 View的布局过程 1. ViewRootImpl.performLayout private void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth, int desiredWindowHeight) { final View host = mView; ... host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight()); ... } 虽然ViewGroup中重写了View的layout方法，并将其标为final，但是实现还在View.layout方法里。\n注意：这里传入的宽高值是measure过程后的测量宽高值。\n2. View.layout public void layout(int l, int t, int r, int b) { boolean changed = isLayoutModeOptical(mParent) ? setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b); if (changed || (mPrivateFlags \u0026amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) { onLayout(changed, l, t, r, b); ... } ... } 在执行onLayout方法回调之前，首先判断布局是否有变化，具体由setFrame方法实现，设置以后，我们调用View的getLeft、getTop、getRight和getBottom等方法才会被赋值。\n3. View.setFrame protected boolean setFrame(int left, int top, int right, int bottom) { boolean changed = false; if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) { changed = true; ... mLeft = left; mTop = top; mRight = right; mBottom = bottom; mRenderNode.setLeftTopRightBottom(mLeft, mTop, mRight, mBottom); mPrivateFlags |= PFLAG_HAS_BOUNDS; ... } return changed; } 通过这个方法设置后，还会调用onSizeChanged方法回调，通知布局大小发生变化！\n4. View.onLayout protected void onLayout(boolean changed, int left, int top, int right, int bottom) { } 可以看到View的onLayout方法是个空的实现，因为对于这个View而言，经过layout后，具体位置相对于父容器已经确定了。这个onLayout方法主要是给继承自ViewGroup的类使用，因为他们还要考虑子View在自身容器下的布局位置，所以一般会遍历所有子View，算出对应的位置，然后调用View.layout方法确认子View的位置。\nView及其直接或间接继承的子View无需关注onLayout，ViewGroup则需要管理子View的布局任务。子View常通过layout方法\nView的绘制过程 1. ViewRootImpl.performDraw private void performDraw() { final boolean fullRedrawNeeded = mFullRedrawNeeded || mReportNextDraw; ... boolean canUseAsync = draw(fullRedrawNeeded); ... } 2. ViewRootImpl.draw private boolean draw(boolean fullRedrawNeeded) { // 需要绘制的内容数据会放到Surface上 Surface surface = mSurface; if (!surface.isValid()) { return false; } ... if (!drawSoftware(surface, mAttachInfo, xOffset, yOffset, scalingRequired, dirty, surfaceInsets)) { return false; } } draw的绘制考虑的情况比较多，这里考虑drawSoftware情况。\n3. ViewRootImpl.drawSoftware /** * @return true if drawing was successful, false if an error occurred */ private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int xoff, int yoff,boolean scalingRequired, Rect dirty, Rect surfaceInsets) { // Draw with software renderer. final Canvas canvas; canvas = mSurface.lockCanvas(dirty); canvas.setDensity(mDensity); ... mView.draw(canvas); surface.unlockCanvasAndPost(canvas); ... return true; } 这一步调用DecorView的draw方法，将需要绘制的数据传给Canvas，之后被Surface组装。\n4. View.draw @CallSuper public void draw(Canvas canvas) { /* * Draw traversal performs several drawing steps which must be executed * in the appropriate order: * * 1. Draw the background * 2. If necessary, save the canvas\u0026#39; layers to prepare for fading * 3. Draw view\u0026#39;s content * 4. Draw children * 5. If necessary, draw the fading edges and restore layers * 6. Draw decorations (scrollbars for instance) */ // Step 1, draw the background, if needed int saveCount; if (!dirtyOpaque) { drawBackground(canvas); } // skip step 2 \u0026amp; 5 if possible (common case) final int viewFlags = mViewFlags; boolean horizontalEdges = (viewFlags \u0026amp; FADING_EDGE_HORIZONTAL) != 0; boolean verticalEdges = (viewFlags \u0026amp; FADING_EDGE_VERTICAL) != 0; if (!verticalEdges \u0026amp;\u0026amp; !horizontalEdges) { // Step 3, draw the content if (!dirtyOpaque) onDraw(canvas); // Step 4, draw the children dispatchDraw(canvas); drawAutofilledHighlight(canvas); // Overlay is part of the content and draws beneath Foreground if (mOverlay != null \u0026amp;\u0026amp; !mOverlay.isEmpty()) { mOverlay.getOverlayView().dispatchDraw(canvas); } // Step 6, draw decorations (foreground, scrollbars) onDrawForeground(canvas); // Step 7, draw the default focus highlight drawDefaultFocusHighlight(canvas); // we\u0026#39;re done... return; } } 在View的draw方法中，做的事情大致有：\n绘制背景：drawBackground(canvas) 绘制自身内容：onDraw(canvas) 分发给子View的绘制：dispatchDraw(canvas) 绘制前景：onDrawForeground(canvas) 绘制默认焦点高亮区域：drawDefaultFocusHighlight(canvas) 一般而言，ViewGroup的子类无须管理绘制任务，而View及其直接或者间接继承的子View只需关注onDraw方法绘制自身即可。\nView小结 View的工作流程可以用下图简要表示：\n","permalink":"/posts/android/view_traversals/","summary":"\u003ch3 id=\"概述\"\u003e概述\u003c/h3\u003e\n\u003cp\u003e在Android的知识体系中，\u003cstrong\u003eView\u003c/strong\u003e扮演着很重要的角色，简单来理解，View是Android里Window的表现形式。\u003c/p\u003e\n\u003cp\u003eViewRootImpl在整个View体系中起着中流砥柱的作用，它是控件树正常运作的动力所在，主要功能有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e连接WindowManager和DecorView的纽带；\u003c/li\u003e\n\u003cli\u003e向DecorView分发输入事件；\u003c/li\u003e\n\u003cli\u003e完成View的绘制(measure，layout，draw)；\u003c/li\u003e\n\u003cli\u003e负责与WMS交互通信，调整窗口大小及布局。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"view工作流程\"\u003eView工作流程\u003c/h3\u003e\n\u003ch4 id=\"1-viewrootimplsetview\"\u003e1. ViewRootImpl.setView\u003c/h4\u003e\n\u003cp\u003e在WindowManagerGlobal.addView方法中，会创建ViewRootImpl对象，并通过setView方法将DecorView对象和WindowManager.LayoutParams等参数传入。View流程相关的代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003esetView\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eview\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eWindowManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eLayoutParams\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eattrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eView\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epanelParentView\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emView\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eview\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emWindowAttributes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecopyFrom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eattrs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003emAdded\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003erequestLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过内部的requestLayout()方法开启View的工作流程。\u003c/p\u003e\n\u003ch4 id=\"2-viewrootimplrequestlayout\"\u003e2. ViewRootImpl.requestLayout\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@Override\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003erequestLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003emHandlingLayoutInLayoutRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 检查线程对象，调用方若不在当前ViewRootImpl线程将会出错\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003echeckThread\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003emLayoutRequested\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 计划执行遍历任务\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003escheduleTraversals\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003echeckThread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emThread\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eThread\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ecurrentThread\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ethrow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCalledFromWrongThreadException\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Only the original thread that created a view hierarchy\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;can touch its views.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里需要说明的是，View的工作流程是在创建ViewRootImpl的线程中运行的，而ViewRootImpl是在主线程被创建的！\u003c/p\u003e","title":"Android View工作流程"},{"content":"View是Android所有控件的基类，是一种界面层控件的抽象角色。在Android的设计中，ViewGroup也继承了View，这就意味着View本身就可以是单个控件也可以是由多个控件组成的一组控件，通过这种关系就形成了View树的结构。\nView位置参数 View的位置主要由它的四个顶点来决定，分别对应于View的四个属性：top、left、right、bottom，其中top是左上角纵坐标，left是左上角横坐标，right是右下角横坐标，bottom是右下角纵坐标。注意，这些坐标是相对于View的父容器来说的，它是一种相对坐标。\nView的宽高和坐标的关系：width = right -left; height = bottom - top;\n从Android3.0开始，View增加参数：x、y、translationX、translationY，其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且translationX和translationY的默认值是0。\n这几个参数的换算关系如下：x = left + translationX; y = top + translationY;\n在View在平移的过程中，top和left是原始左上角的位置信息，不会发生改变。发生改变的是x、y、translationX和translationY这四个参数。\nMotionEvent和TouchSlop 在手指接触屏幕后产生的一系列事件，该事件对象是MotionEvent。\n下面是常用的事件类型：\npublic final class MotionEvent extends InputEvent implements Parcelable { public static final int ACTION_MASK = 0xff; public static final int ACTION_DOWN = 0; public static final int ACTION_UP = 1; public static final int ACTION_MOVE = 2; public static final int ACTION_CANCEL = 3; public static final int ACTION_OUTSIDE = 4; public static final int ACTION_POINTER_DOWN = 5; public static final int ACTION_POINTER_UP = 6; ... } TouchSlop是系统所能识别出的被认为是滑动的最小距离。可以通过如下代码获取：ViewConfiguration. get(getContext()).getScaledTouchSlop()。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验\nView滑动方向 Android坐标系可分为屏幕坐标系与视图坐标系：\n屏幕坐标系：屏幕左上角为坐标原点，向右为x轴增大方向，向下为y轴增大方向 视图坐标系：相对于父控件而言，以父控件的左上角为坐标原点 滑动的两种类型及方向对应关系：\n滑动类型 方向定义 典型场景 值范围 手指滑动 用户手指在屏幕上的物理移动方向 MotionEvent 的坐标变化 以像素为单位 页面内容滑动 视图内容相对于屏幕的移动方向 scrollTo()、translationY 以像素为单位 以页面垂直滚动为例，定义上一次点击为mLastTouchY，当前点击为y，此时可计算出：\n// 滚动值 int dy = mLastTouchY - y; // 通过translationY实现页面内容滑动 // translationY初始值为0，加上正数值，页面内容向下滑动；加上负数值，页面内容向上滑动 float translationY = view.getTranslationY(); if(dy \u0026gt; 0) { // 手指向上滑动，页面内容向上滑动（dy正数，-dy则负数，此时translationY相加视图向上滑动） view.setTranslationY(translationY - dy) } else { // 手指向下滑动，页面内容向下滑动（dy为负数，-dy则正数，此时translationY相加视图向下滑动） view.setTranslationY(translationY - dy) } View滑动常用方法 以下是View滑动的常用方法：\nscrollTo：实现传递坐标点的绝对滑动 scrollBy：基于当前位置的相关滑动 canScrollVertically：是否可在垂直方向滑动。传入负数检查是否可向上滑动，传入正数检查是否可向下滑动 canScrollHorizontally：是否可在水平方向滑动。传入负数检查是否可向左滑动，传入正数检查是否可向右滑动 computeVerticalScrollOffset：返回当前滚动的偏移量，即已经滚动的距离。 computeVerticalScrollExtent：返回当前可见区域的高度（屏幕显示内容的高度）。 computeVerticalScrollRange：返回可滚动内容的总高度（包括不可见部分） View滑动速度、手势与滑动 1. VelocityTracker VelocityTracker，速度追踪，用于追踪手指在滑动过程中的速度，包括水平和竖直方向的速度。\npublic boolean onTouchEvent(MotionEvent event) { ... // 追踪当前单击事件的速度 VelocityTracker velocityTracker = VelocityTracker.obtian(); velocityTracker.addMovement(event); ... } // 计算当前事件的速度。这里计算的是事件在1s内滑动的像素值 velocityTracker.computeCurrentVelocity(1000); int xVelocity = velocityTracker.getXVelocity(); int yVelocity = velocityTracker.getYVelocity(); // 回收计算事件速度的资源 velocityTracker.clear(); velocityTracker.recycle(); Android的坐标体系是以左上角(0,0)作为坐标原点，当手指从水平方向从左向右滑动，速度值为正数；当手指从水平方向从右向左，速度值为负数。\n2. GestureDetector GestureDetector，手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。大致的流程是创建一个GestureDetector对象，并实现需要监听的接口，接管View的onTouchEvent方法及返回值即可。ScaleGestureDetector的使用流程与之类似。\n3. Scroller弹性滑动 Scroller，弹性滑动对象，用于实现View的弹性滑动。Scroller本身无法让View弹性滑动，需要和View的computeScroll方法搭配使用。\nScroller mScroller; public XXXView(...){ // 初始化Scroller对象 mScroller = new Scroller(mContext); } private void smoothScrollToX(int destX, int destY) { int scrollX = mScroller.getScrollX(); int delta = destX - scrollX; // 在1s的时间内滑动delta距离，注意第三和四个参数是在X和Y轴滑动的距离值 mScroller.startScroll(scrollX, 0, delta, 0, 1000); // 更新操作其中一个触发的方法时computeScroll() invalidate(); } @Override public void computeScroll() { if(mScroller.computeScrollOffset()){ // 计算是否有滑动偏移值 scrollTo(mScroller.getCurrX(), mScroller.getCurrY()); // 执行刷新后会继续回调此方法，直至不再有滑动偏移值 invalidate(); } } 实现原理：调用View的invalidate方法会在draw方法触发调用computeScroll方法，而Scroller的computeScrollOffset方法内部会根据时间流逝的百分比来算出当前的mCurrX与mCurrY值，当未完成弹性滑动的时候，会不断触发View的scrollTo方法进行滑动。\n","permalink":"/posts/android/view_basic/","summary":"\u003cp\u003eView是Android所有控件的基类，是一种界面层控件的抽象角色。在Android的设计中，ViewGroup也继承了View，这就意味着View本身就可以是单个控件也可以是由多个控件组成的一组控件，通过这种关系就形成了View树的结构。\u003c/p\u003e\n\u003ch3 id=\"view位置参数\"\u003eView位置参数\u003c/h3\u003e\n\u003cp\u003eView的位置主要由它的四个顶点来决定，分别对应于View的四个属性：\u003cstrong\u003etop、left、right、bottom\u003c/strong\u003e，其中top是左上角纵坐标，left是左上角横坐标，right是右下角横坐标，bottom是右下角纵坐标。注意，这些坐标是相对于View的父容器来说的，它是一种相对坐标。\u003c/p\u003e\n\u003cp\u003eView的宽高和坐标的关系：\u003ccode\u003ewidth = right -left; height = bottom - top;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e从Android3.0开始，View增加参数：\u003cstrong\u003ex、y、translationX、translationY\u003c/strong\u003e，其中x和y是View左上角的坐标，而translationX和translationY是View左上角相对于父容器的偏移量。这几个参数也是相对于父容器的坐标，并且\u003cstrong\u003etranslationX和translationY的默认值是0\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e这几个参数的换算关系如下：\u003ccode\u003ex = left + translationX; y = top + translationY;\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在View在平移的过程中，top和left是原始左上角的位置信息，不会发生改变。发生改变的是x、y、translationX和translationY这四个参数。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"motionevent和touchslop\"\u003eMotionEvent和TouchSlop\u003c/h3\u003e\n\u003cp\u003e在手指接触屏幕后产生的一系列事件，该事件对象是\u003cstrong\u003eMotionEvent\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e下面是常用的事件类型：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMotionEvent\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eextends\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInputEvent\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eimplements\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eParcelable\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_MASK\u003c/span\u003e\u003cspan class=\"w\"\u003e             \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0xff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_DOWN\u003c/span\u003e\u003cspan class=\"w\"\u003e             \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_UP\u003c/span\u003e\u003cspan class=\"w\"\u003e               \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_MOVE\u003c/span\u003e\u003cspan class=\"w\"\u003e             \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_CANCEL\u003c/span\u003e\u003cspan class=\"w\"\u003e           \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_OUTSIDE\u003c/span\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_POINTER_DOWN\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eACTION_POINTER_UP\u003c/span\u003e\u003cspan class=\"w\"\u003e       \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eTouchSlop\u003c/strong\u003e是系统所能识别出的被认为是滑动的最小距离。可以通过如下代码获取：\u003ccode\u003eViewConfiguration. get(getContext()).getScaledTouchSlop()\u003c/code\u003e。当我们在处理滑动时，可以利用这个常量来做一些过滤，比如当两次滑动事件的滑动距离小于这个值，我们就可以认为未达到滑动距离的临界值，因此就可以认为它们不是滑动，这样做可以有更好的用户体验\u003c/p\u003e","title":"Android View基础知识"},{"content":"下载与安装 Charles官网下载安装包，下载成功后根据指示安装即可\n官网地址： www.charlesproxy.com\nCharles激活码：\nRegistered Name: https://zhile.io\nLicense Key: 48891cf209c6d32bf4\nHTTP代理设置 1. 设置PC端代理端口号 在Proxy -\u0026gt; Proxy settings可设置HTTP Proxy的端口号。\n2. 设置手机端代理端口号 在应用内的Help -\u0026gt; Local IP Address上查看本机的IP地址（en0等标识）\n3. Android手机代理设置 设置-WLAN，进入已连接WiFi手动设置（端口需与PC端设置端口号一致）\n编辑网络，选择手动代理，输入PC端的IP地址 + Charles配置的端口号。\n当手机进行数据请求时，Charles 将弹出是否允许连接此代理(选择允许 allow)，之后便可进行HTTP抓包。\nHTTPS代理设置 HTTP的代理设置是抓取不了HTTPS，故需要进行HTTPS代理设置。\n手机上需要安装Charles SSL证书认证，证书下载地址：http://charlesproxy.com/getssl\n建议使用Chrome浏览器，其它浏览器有可能报错。\n其它下载地址推荐：https://www.charlesproxy.com/assets/legacy-ssl/charles.crt\n1. Charles配置SSL 选中Proxy -\u0026gt; SSL Proxying Setting选项，开启SSL代理，并添加或移除信任地址（默认端口号443）。\n如果拦截所有，则配置主机*，端口号 443\n2. Android手机安装证书 在手机浏览器输入上面的证书下载地址，证书下载成功后，进入设置-安全-加密与凭据-安装证书-CA证书，选择已下载的证书进行安装。\n不同安卓手机设置里面选择不同，可自行查找系统安全进入证书安装\n3. Android系统证书配置 上面的方式配置出来的证书是用户类型，如果需要抓取应用release类型的网络日志，则需要配置成系统证书。\n具体步骤如下：\n选中Help -\u0026gt; SSL Proxying -\u0026gt; Save Charles Root Certificate...选项 保存charles-ssl-proxying-certificate.pem到指定目录 执行openssl x509 -inform PEM -subject_hash_old -in [pem文件路径]，这里最上方一行输出的是“91b45736” 重命名pem文件，系统的证书名称格式一般为：[pem的hash值].0名称。故笔者这里需要将pem文件命名为91b45736.0 将重命名后的文件push到如下路径：/system/etc/security/cacerts/ 重启手机，在设置应用上找到信任的凭据,查看系统的CA证书列表，确认是否有Charles Proxy CA存在 附上cer转换成pem的命令：openssl x509 -inform DER -in [cer文件] -out [pem文件]\nCharles的使用 浏览视图可分为：Structure 和 Sequence\n常用的操作有：\n专注视图：在侧边栏对某个地址进行右键 -\u0026gt; Focus操作，这样会按当前host及其它host进行分类，从而更专注于当前的host类别请求内容。 重复请求：在侧边栏对某个地址进行右键 -\u0026gt; Repeat操作，可重复选中的请求。另外Repeat Advanced可配置多次重复请求，相当于简单的压测。 重定向：打开Tools -\u0026gt; Map Remote页面，开启重定向，添加需要映射的host地址，这样在不改变包体的情况下完成host切换。 网速模拟：打开Proxy -\u0026gt; Throttle Settings页面，进行网速模拟配置。再通过Proxy -\u0026gt; start(stop) Throttling开启或关闭网速模拟环境。 修改请求：在侧边栏对某个地址进行右键 -\u0026gt; Compose操作，可重新组装参数并请求。 ","permalink":"/posts/tools/charles/","summary":"\u003ch3 id=\"下载与安装\"\u003e下载与安装\u003c/h3\u003e\n\u003cp\u003eCharles官网下载安装包，下载成功后根据指示安装即可\u003c/p\u003e\n\u003cp\u003e官网地址： \u003ca href=\"https://www.charlesproxy.com/\"\u003ewww.charlesproxy.com\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eCharles激活码：\u003c/p\u003e\n\u003cp\u003eRegistered Name: \u003ccode\u003ehttps://zhile.io\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eLicense Key: \u003ccode\u003e48891cf209c6d32bf4\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"http代理设置\"\u003eHTTP代理设置\u003c/h3\u003e\n\u003ch4 id=\"1-设置pc端代理端口号\"\u003e1. 设置PC端代理端口号\u003c/h4\u003e\n\u003cp\u003e在\u003ccode\u003eProxy -\u0026gt; Proxy settings\u003c/code\u003e可设置HTTP Proxy的端口号。\u003c/p\u003e\n\u003ch4 id=\"2-设置手机端代理端口号\"\u003e2. 设置手机端代理端口号\u003c/h4\u003e\n\u003cp\u003e在应用内的\u003ccode\u003eHelp -\u0026gt; Local IP Address\u003c/code\u003e上查看本机的IP地址（en0等标识）\u003c/p\u003e\n\u003ch4 id=\"3-android手机代理设置\"\u003e3. Android手机代理设置\u003c/h4\u003e\n\u003cp\u003e设置-WLAN，进入已连接WiFi手动设置（端口需与PC端设置端口号一致）\u003c/p\u003e\n\u003cp\u003e编辑网络，选择手动代理，输入PC端的IP地址 + Charles配置的端口号。\u003c/p\u003e\n\u003cp\u003e当手机进行数据请求时，Charles 将弹出是否允许连接此代理(选择允许 allow)，之后便可进行HTTP抓包。\u003c/p\u003e\n\u003ch3 id=\"https代理设置\"\u003eHTTPS代理设置\u003c/h3\u003e\n\u003cp\u003eHTTP的代理设置是抓取不了HTTPS，故需要进行HTTPS代理设置。\u003c/p\u003e\n\u003cp\u003e手机上需要安装Charles SSL证书认证，证书下载地址：\u003ccode\u003ehttp://charlesproxy.com/getssl\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e建议使用Chrome浏览器，其它浏览器有可能报错。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e其它下载地址推荐：https://www.charlesproxy.com/assets/legacy-ssl/charles.crt\u003c/p\u003e\n\u003ch4 id=\"1-charles配置ssl\"\u003e1. Charles配置SSL\u003c/h4\u003e\n\u003cp\u003e选中\u003ccode\u003eProxy -\u0026gt; SSL Proxying Setting\u003c/code\u003e选项，开启SSL代理，并添加或移除信任地址（默认端口号443）。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果拦截所有，则配置主机\u003ccode\u003e*\u003c/code\u003e，端口号 \u003cstrong\u003e443\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"2-android手机安装证书\"\u003e2. Android手机安装证书\u003c/h4\u003e\n\u003cp\u003e在手机浏览器输入上面的证书下载地址，证书下载成功后，进入\u003ccode\u003e设置-安全-加密与凭据-安装证书-CA证书\u003c/code\u003e，选择已下载的证书进行安装。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e不同安卓手机设置里面选择不同，可自行查找系统安全进入证书安装\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"3-android系统证书配置\"\u003e3. Android系统证书配置\u003c/h4\u003e\n\u003cp\u003e上面的方式配置出来的证书是用户类型，如果需要抓取应用release类型的网络日志，则需要配置成系统证书。\u003c/p\u003e\n\u003cp\u003e具体步骤如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e选中\u003ccode\u003eHelp -\u0026gt; SSL Proxying -\u0026gt; Save Charles Root Certificate...\u003c/code\u003e选项\u003c/li\u003e\n\u003cli\u003e保存\u003ccode\u003echarles-ssl-proxying-certificate.pem\u003c/code\u003e到指定目录\u003c/li\u003e\n\u003cli\u003e执行\u003ccode\u003eopenssl x509 -inform PEM -subject_hash_old -in [pem文件路径]\u003c/code\u003e，这里最上方一行输出的是“91b45736”\u003c/li\u003e\n\u003cli\u003e重命名pem文件，系统的证书名称格式一般为：\u003ccode\u003e[pem的hash值].0\u003c/code\u003e名称。故笔者这里需要将pem文件命名为\u003ccode\u003e91b45736.0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e将重命名后的文件push到如下路径：\u003cstrong\u003e/system/etc/security/cacerts/\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e重启手机，在设置应用上找到\u003ccode\u003e信任的凭据\u003c/code\u003e,查看系统的CA证书列表，确认是否有Charles Proxy CA存在\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e附上cer转换成pem的命令：\u003ccode\u003eopenssl x509 -inform DER -in [cer文件] -out [pem文件]\u003c/code\u003e\u003c/p\u003e","title":"Charles网络抓包"},{"content":"本文将基于Ubuntu系统环境快速搭建OpenVPN用于端对端的安全传输通道访问。\n1. 安装软件 安装相关的软件(openvpn与easy-rsa)，执行命令：\nsudo apt update sudo apt install openvpn easy-rsa 查看安装后的 openvpn与 easy-rsa 版本，如下：\nopenvpn/focal-updates,focal-security,now 2.4.12-0ubuntu0.20.04.2 amd64 [installed] virtual private network daemon easy-rsa/focal,focal,now 3.0.6-1 all [installed] Simple shell based CA utility 2. 制作证书 OpenVPN 的证书分为三部分：CA证书、Server端证书、Client端证书。下面我们通过easy-rsa分别对其进行制作。\n制作证书：\n进入 /usr/share/easy-rsa 目录\n拷贝 vars.example 文件，并将新的文件命名为 vars\n编辑 vars 文件，取消注释并按需修改以下内容信息：\nset_var EASYRSA_REQ_COUNTRY \u0026#34;US\u0026#34; set_var EASYRSA_REQ_PROVINCE \u0026#34;California\u0026#34; set_var EASYRSA_REQ_CITY \u0026#34;San Francisco\u0026#34; set_var EASYRSA_REQ_ORG \u0026#34;Copyleft Certificate Co\u0026#34; set_var EASYRSA_REQ_EMAIL \u0026#34;me@example.net\u0026#34; set_var EASYRSA_REQ_OU \u0026#34;My Organizational Unit\u0026#34; 在该目录里执行以下命令用于初始化与生成CA证书：\nsudo ./easyrsa init-pki sudo ./easyrsa build-ca nopass 生成服务端证书：\n# 命名为 server sudo ./easyrsa build-server-full server nopass 生成客户端证书：\n# 命令为 client sudo ./easyrsa build-client-full client nopass 修改pki目录权限并查看生成的 crt 与 key 文件\n# 修改生成的 pki 目录权限 sudo chmod 777 pki # 查看生成的证书与私钥 sudo ls issued sudo ls private 创建迪菲·赫尔曼密钥：\n# 生成dh.pem文件 sudo ./easyrsa gen-dh 3. 服务端配置 文件拷贝：\n复制一份服务器端配置文件模板 server.conf 到 /etc/openvpn/\nsudo cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/ cd /etc/openvpn/ sudo gzip -d server.conf.gz 拷贝CA证书、dh.pem、服务端证书/私钥，客户端证书/私钥：\nsudo cp /usr/share/easy-rsa/pki/{ca.crt,dh.pem} /etc/openvpn sudo cp /usr/share/easy-rsa/pki/issued/server.crt /etc/openvpn/server sudo cp /usr/share/easy-rsa/pki/private/server.key /etc/openvpn/server sudo cp /usr/share/easy-rsa/pki/issued/ecs_client.crt /etc/openvpn/client sudo cp /usr/share/easy-rsa/pki/private/ecs_client.key /etc/openvpn/client 服务端 /etc/openvpn/server.conf 文件配置摘录：\nport 9094 # 使用TCP网络通信协议 proto tcp ;proto udp # 配置ca、cert、key、dh等 ca ca.crt cert server/server.crt key server/server.key # This file should be kept secret dh dh.pem server 10.8.0.0 255.255.255.0 # 客户端配置目录 client-config-dir /etc/openvpn/ccd # 设置 DNS push \u0026#34;dhcp-option DNS 8.8.8.8\u0026#34; push \u0026#34;dhcp-option DNS 114.114.114.114\u0026#34; # 使用的压缩算法 comp-lzo 当服务端设定了客户端配置/etc/openvpn/ccd目录后，可在目录内新增连接的客户端名称的文件（如 client），往其加入如下内容：\n# 设定客户端固定分配的IP地址，这里是 10.8.0.9 ifconfig-push 10.8.0.9 10.8.0.10 4. 客户端配置 拷贝客户端配置文件（ca.crt、client.crt、client.key）到指定远程客户端主机。\n在客户端主机操作格式参考：\nsudo chown user ca.crt client/client{.crt,.key} scp -r {user}@{remote_ip}:/etc/openvpn/{ca.crt,client/client{.crt,.key}} {client_dir} 以Ubuntu客户端为例，拷贝后的内容列表：\n/etc/openvpn/client . ├── ca.crt ├── client.conf ├── client.crt └── client.key 对应的 client.conf 配置样例：\nclient dev tun proto tcp remote [remote_ip] 9094 resolv-retry infinite nobind persist-key persist-tun ca ca.crt cert client.crt key client.key remote-cert-tls server verb 3 mute 20 comp-lzo cipher aes-256-cbc route-nopull #don\u0026#39;t pull routes from the server route 10.8.0.0 255.255.255.0 #direct all 192.168.0.* subnet traffic through the VPN 5. nginx转发配置 在服务端主机里进行nginx配置，使其可以将外部访问转发到客户端主机里。\n在 /etc/nginx/conf.d 新增 client.conf 文件，加入以下内容：\n# 配置服务端与客户端的端口映射关系 map $server_port $client_port { 9090 9090; 9091 9091; 9099 9099; } server { listen 9090; listen 9091; listen 9099; server_name your_server_domain_or_ip; # 配置客户端主机的固定IP地址 location / { set $target_port $client_port; proxy_pass http://10.8.0.9:$target_port; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } 上面示例可转发指定的端口内容到客户端主机里，完成外部访问子网客户端资源。\n写在后面 openvpn服务可分为以下几类：\nopenvpn.service：一次执行，确认是否存在openvpn openvpn@.service：启动服务，读取 /etc/openvpn 下的 *.conf 文件 openvpn-server@.service：启动服务，读取 /etc/openvpn/server 下的 *.conf 文件 openvpn-client@.service：启动服务，读取 /etc/openvpn/client 下的 *.conf 文件 服务端启动openVPN服务说明：\n启动openVPN服务端的服务，当把 server.conf 放到到 /etc/openvpn/ 目录里，对应脚本/lib/systemd/system/openvpn@.service。 参数会根据 .conf 命名来拼接，如：server.conf则为 server，此时启动服务的命令为：sudo systemctl start openvpn@server 客户端启动openVPN服务说明：\n若配置放在 /etc/openvpn/client 目录里，对应脚本/lib/systemd/system/openvpn-client@.service 假设 .conf 命名为 client.conf , 那么启动服务的命令为：sudo systemctl start openvpn-client@client 配置openVPN的255.255.255.252子网：\n255.255.255.252子网掩码也称为/30子网，它提供了一个非常小的子网，每个子网包含4个IP地址，其中2个是可用的IP地址。\n组成元素：网络地址、两个可用IP地址、一个广播地址\n子网示例：\n10.8.0.0/30子网范围：10.8.0.0 - 10.8.0.3 网络地址：10.8.0.0 可用IP地址：10.8.0.1 和 10.8.0.2 广播地址：10.8.0.3 ","permalink":"/posts/tools/openvpn/","summary":"\u003cp\u003e本文将基于Ubuntu系统环境快速搭建OpenVPN用于端对端的安全传输通道访问。\u003c/p\u003e\n\u003ch3 id=\"1-安装软件\"\u003e1. 安装软件\u003c/h3\u003e\n\u003cp\u003e安装相关的软件(openvpn与easy-rsa)，执行命令：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt update\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt install openvpn easy-rsa\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e查看安装后的 openvpn与 easy-rsa 版本，如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eopenvpn/focal-updates,focal-security,now 2.4.12-0ubuntu0.20.04.2 amd64 [installed]\n  virtual private network daemon\n\neasy-rsa/focal,focal,now 3.0.6-1 all [installed]\n  Simple shell based CA utility\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"2-制作证书\"\u003e2. 制作证书\u003c/h3\u003e\n\u003cp\u003eOpenVPN 的证书分为三部分：CA证书、Server端证书、Client端证书。下面我们通过easy-rsa分别对其进行制作。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e制作证书\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e进入 \u003cstrong\u003e/usr/share/easy-rsa\u003c/strong\u003e 目录\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e拷贝 vars.example 文件，并将新的文件命名为 \u003cstrong\u003evars\u003c/strong\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e编辑 vars 文件，取消注释并按需修改以下内容信息：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset_var EASYRSA_REQ_COUNTRY    \u003cspan class=\"s2\"\u003e\u0026#34;US\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset_var EASYRSA_REQ_PROVINCE   \u003cspan class=\"s2\"\u003e\u0026#34;California\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset_var EASYRSA_REQ_CITY       \u003cspan class=\"s2\"\u003e\u0026#34;San Francisco\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset_var EASYRSA_REQ_ORG        \u003cspan class=\"s2\"\u003e\u0026#34;Copyleft Certificate Co\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset_var EASYRSA_REQ_EMAIL      \u003cspan class=\"s2\"\u003e\u0026#34;me@example.net\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset_var EASYRSA_REQ_OU         \u003cspan class=\"s2\"\u003e\u0026#34;My Organizational Unit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e在该目录里执行以下命令用于初始化与生成CA证书：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo ./easyrsa init-pki\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo ./easyrsa build-ca nopass\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e生成服务端证书：\u003c/p\u003e","title":"openVPN"},{"content":"简要概述 1. 启动过程 Linux系统的启动过程可以分为5个阶段：\n内核的引导 运行 init 系统初始化 建立终端 用户登录系统 启动流程图:\ngraph LR system(操作系统) boot(/boot) init(init进程) run(运行级别) etc(/etc/init.d) user(用户登录) shell(Login shell) system --\u003e boot boot --\u003e init init --\u003e run run --\u003e etc etc --\u003e user user --\u003e shell 2. 目录结构 登录系统后，在当前命令窗口下输入命令：ls /\n根目录文件夹及文件 描述 /bin bin是Binary的缩写, 这个目录存放着最经常使用的命令 /boot 存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件 /dev dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的 /etc 用来存放所有的系统管理所需要的配置文件和子目录 /home 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的 /lib 存放着系统最基本的动态连接共享库，其作用类似于Windows里的dll文件 /lost+found 一般情况下是空的，当系统非法关机后，这里就存放了一些文件 /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下 /mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了 /opt 给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的 /proc 这个目录的内容不在硬盘上而是在内存里 ,是一个虚拟的目录它是系统内存的映射，可以通过直接访问这个目录来获取系统信息 /root 该目录为系统管理员，也称作超级权限者的用户主目录 /sbin s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序 /srv 该目录存放一些服务启动之后需要提取的数据 /sys 系统文件夹 /tmp 这个目录是用来存放一些临时文件的 /usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录/usr/bin：系统用户使用的应用程序/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序/usr/src：内核源代码默认的放置目录 /var 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件 3. 文件权限管理 Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：\nuser@user-600-G1-TWR:/local/download$ ll total 48568 drwxrwxr-x 2 user user 4096 8月 31 19:44 apk/ -rw-rw-r-- 1 user user 3824150 9月 6 17:15 Calculator_Global_v8.0.1.8.0903.0_signed_releasekey_alldpi.apk 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等\n当为[ d ]则是目录 当为[ - ]则是文件 若是[ l ]则表示为链接文档(link file) 若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置) 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置) 从左至右用0-9这些数字来表示:\n第0位确定文件类型 第1-3位确定属主（该文件的所有者）拥有该文件的权限。 第4-6位确定属组（所有者的同组用户）拥有该文件的权限 第7-9位确定其他用户拥有该文件的权限。 第1、4、7位表示读权限，如果用\u0026quot;r\u0026quot;字符表示，则有读权限，如果用\u0026quot;-\u0026ldquo;字符表示，则没有读权限；\n第2、5、8位表示写权限，如果用\u0026quot;w\u0026quot;字符表示，则有写权限，如果用\u0026rdquo;-\u0026ldquo;字符表示没有写权限；\n第3、6、9位表示可执行权限，如果用\u0026quot;x\u0026quot;字符表示，则有执行权限，如果用\u0026rdquo;-\u0026ldquo;字符表示，则没有执行权限。\nLinux文件属性有两种设置方法，一种是数字，一种是符号。Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。\n数字权限更改\n文件的权限字符为：[-rwxrwxrwx]，其中r:4，w:2，x:1分布。\n如果要将权限变成 -rwxr-xr\u0026ndash;，那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754，命令:chmod 754 [file]\n符号权限更改\n九个权限分别是(1)user (2)group (3)others三种身份，可以由u, g, o来代表三种身份的权限。\n此外， a 则代表 all 亦即全部的身份！那么读写的权限就可以写成r, w, x！也就是可以使用下面的方式来看：\ngraph LR chmod --- u chmod --- g chmod --- o chmod --- a op(\"+(加入) -(除去) =(设定)\") u --- op g --- op o --- op a --- op permission(\"权限：r(读取)w(写入)x(执行)\") op --- permission f(文件或目录) permission --- f 4. Linux系统主要结构 Linux内核：Kernel用于实现操作系统的基本功能，分为硬件和软件方面 Linux shell：Shell是系统的用户界面，提供用户与内核交互操作 Linux文件系统：文件存放在磁盘等存储设备上的组织方法，采用统一的树型结构 标准的Linux文件系统就是Ext2文件系统，通过虚拟文件系统VFS来通信\n常用命令 命令 描述 history 直接显示所有的历史命令 !10 直接运行history列表中的第10条命令 man [command] 查询某个命令的使用方法 Tab键 按一下补全命令，按两下让所有匹配的命令打印到控制台 chmod [选项] 模式 文件 模式为权限，最高权限为777 gedit xxx 用gedit打开xxx文件，类似subl文本器 grep [keyword] 搜索关键词 \u0026gt; 将输出结果重置到一个文件 \u0026gt;\u0026gt; 将输出结果追加到一个文件 ` ` \u0026amp; 后台运行命令 \u0026ldquo;\u0026amp;\u0026quot;，可以使其后台运行 \u0026amp;\u0026amp; 条件执行\u0026rdquo;\u0026amp;\u0026amp;\u0026quot;，当前一个命令执行完毕才会运行下个一个命令 ; 多条命令同时执行，可用;进行分隔命令 wc 输出内容的行、单词、字节大小 xargs 将上一次命令输出结果作为流传递到另一个命令中 ln -s [源位置] [目标位置] 在目标位置创建链接到源位置 mkdir [dir_name] 建立目录 mkdir -p [dir_parent/dir_child] 同时创建多层目录 rmdir [dir_name] 删除一个空目录 rm -rf [dir_name] 删除一个目录，文件或者文件夹，无论是否为空。注意删除之前查看路径是否正确 du -h [file] 查看某个文件的大小 ls -al 显示所有文件（-a）及其属性（-l），包括隐藏的内容。蓝色为目录；绿为可执行文件；红为压缩文件；浅蓝为链接文件；灰为其他文件；红底白字为错误的链接文件 file [file_name] 查看文件的类型 stat [file_name] 查看文件状态 touch [name] 新建一个空文件 rm [file1] [file2] […] 删除多个文件 cp -i [文件名] [目标路径/文件名] 复制文件 grep -nr [关键词] [文件路径] 获取该路径下含有该关键词的文件，具体到内容的行数 which [object] 查看某个对象的位置路径 df -h 查看电脑硬盘使用情况 mv -i [name1] [name2] 将name1重命名为name2 mv -i [SOURCE] [DEST] 移动文件 cat -n [file] 由第一行开始显示文件内容 tac [file] 从最后一行开始显示，可以看出 tac 是 cat 的倒著写！ nl [file] 显示的时候，同时输出行号，不包括空行数 more [file] 一页一页的显示文件内容 less [file] 与 more 类似，但是比 more 更好的是，他可以往前翻页 head [-n number] [file] 只看文件头number行 tail [-n number] [file] 只看文件末尾number行 md5sum [file] 查看文件的MD5值 sudo lspci -v 使用管理员权限查看所有的pci硬件信息 timedatectl 控制系统时间与日期配置 traceroute 打印目标网络地址经过的路由信息 chown -R username:groupname [location] 递归改变目录及内部文件的所有者 其他命令 1. 关机 流程：sync \u0026gt; shutdown \u0026gt; reboot \u0026gt; halt\nsync # 将数据由内存同步到硬盘中 shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机： shutdown –h now # 立马关机 shutdown –h 20:25 # 系统会在今天20:25关机 shutdown –h +10 # 十分钟后关机 shutdown –r now # 系统立马重启 shutdown –r +10 # 系统十分钟后重启 reboot # 重启，等同于 shutdown –r now halt # 关闭系统，等同于shutdown –h now 和 poweroff 2. linux解压缩常用命令 压缩包格式 压缩/打包 解压/解包 备注 .tar文件 tar -cvf FileName.tar DirName tar -xf FileName.tar 仅打包，并非压缩 .zip文件 zip FileName.zip DirName unzip FileName.zip .tar.gz文件，.tgz文件 tar -zcvf FileName.tar.gz DirName tar -zxvf FileName.tar.gz tar -C DesDirName -zxvf FileName.tar.gz # 解压到目标路径 .gz文件 gzip FileName # 只能压缩文件 gunzip FileName.gz # 解压1 gzip -d FileName.gz # 解压2｜ 3. bashrc和profile 共同点：都是设置环境变量的文件\n区别：\n/etc/profile，/etc/bashrc 是系统全局环境变量设定 ~/.profile，~/.bashrc用户目录下的私有环境变量设定 读取顺序:\n读取所有用户的全局环境变量设定档/etc/profile，然后读取整个系统的环境设定档/etc/environment 读取当前用户的环境变量设定档~/.profile 更新profile使其生效：\nsource /etc/profile 4. ps、pstree命令 ps命令输出内容：\nUSER：该进程由哪个用户产生的 PID：进程的ID号 %CPU：该进程占用的CPU资源的百分比 %MEM：该进程占用物理内存的百分比 VSZ：该进程占用虚拟内存的大小，单位KB RSS（Resident Set Size）：该进程占用的实际物理内存的大小，单位KB TTY：该进程在哪个终端运行，其中tty1到tty7代表本地控制台终端，tty1到tty6是本地的字符界面终端，tty7是图形终端 STAT：进程的状态。常见状态有：R运行、S睡眠、T停止、s包含子进程、+位于后台 START：该进程的启动时间 TIME：该进程占用的CPU运算时间 COMMAND：产生该进程的命令名 pstree：显示进程树，一般Linux都是由init进程为根结点创建出来的树\n5. 任务的前后台管理 如果想让程序在后台运行，可以使用\u0026amp;命令，如gedit hello.txt \u0026amp;\n查看后台任务：jobs -l 拉起第n个后台任务到前台：fg %n，如果只是fg命令，则代表第一个后台任务拉起到前台 使用ctrl + z可以将其再次切到后台，并停止运行 使第n个后台任务继续运行：bg %n，如果只是bg命令，则代表第一个后台任务继续运行 kill命令有两种基本用法：kill pid和kill %n 6. apt命令（ Advanced Packaging Tool） 通过 apt 命令，用户可以在同一地方集中得到所有必要的工具，apt 的主要目的是提供一种以「让终端用户满意」的方式来处理 Linux 软件包的有效方式。\n简单来说就是：apt = apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。\n两个建议:\napt可以看作 apt-get 和 apt-cache 命令的子集, 可以为包管理提供必要的命令选项。 apt-get 虽然没被弃用，但作为普通用户，还是应该首先使用apt。 常用的apt命令：\napt install：安装软件包 apt remove：移除软件包 apt purge：移除软件包及配置文件 apt update：刷新存储库索引 apt upgrade：升级所有可升级的软件包 apt full-upgrade：在升级软件包时自动处理依赖关系 apt search：搜索应用程序 apt show：显示包细节 apt list：列出包含条件的包（已安装，可升级等） apt edit-sources：编辑源列表 .deb可用dpkg -i命令安装，dpkg命令细节可以键入dpkg \u0026ndash;help查看\n7. grep命令（global regular expression） Linux grep (global regular expression) 命令用于查找文件里符合条件的字符串或正则表达式。\ngrep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。\ngrep [options] pattern [files] # 或 grep [-abcEFGhHilLnqrsvVwxy][-A\u0026lt;显示行数\u0026gt;][-B\u0026lt;显示列数\u0026gt;][-C\u0026lt;显示列数\u0026gt;][-d\u0026lt;进行动作\u0026gt;][-e\u0026lt;范本样式\u0026gt;][-f\u0026lt;范本文件\u0026gt;][--help][范本样式][文件或目录...] 常用选项：\n-i：忽略大小写进行匹配。 -v：反向查找，只打印不匹配的行。 -n：显示匹配行的行号。 -r：递归查找子目录中的文件。 -l：只打印匹配的文件名。 -c：只打印匹配的行数。 更多参数说明：\n-a 或 \u0026ndash;text : 不要忽略二进制的数据。 -A\u0026lt;显示行数\u0026gt; 或 \u0026ndash;after-context=\u0026lt;显示行数\u0026gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。 -b 或 \u0026ndash;byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。 -B\u0026lt;显示行数\u0026gt; 或 \u0026ndash;before-context=\u0026lt;显示行数\u0026gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。 -c 或 \u0026ndash;count : 计算符合样式的列数。 -C\u0026lt;显示行数\u0026gt; 或 \u0026ndash;context=\u0026lt;显示行数\u0026gt;或-\u0026lt;显示行数\u0026gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。 -d \u0026lt;动作\u0026gt; 或 \u0026ndash;directories=\u0026lt;动作\u0026gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。 -e\u0026lt;范本样式\u0026gt; 或 \u0026ndash;regexp=\u0026lt;范本样式\u0026gt; : 指定字符串做为查找文件内容的样式。 -E 或 \u0026ndash;extended-regexp : 将样式为延伸的正则表达式来使用。 -f\u0026lt;规则文件\u0026gt; 或 \u0026ndash;file=\u0026lt;规则文件\u0026gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。 -F 或 \u0026ndash;fixed-regexp : 将样式视为固定字符串的列表。 -G 或 \u0026ndash;basic-regexp : 将样式视为普通的表示法来使用。 -h 或 \u0026ndash;no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。 -H 或 \u0026ndash;with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。 -i 或 \u0026ndash;ignore-case : 忽略字符大小写的差别。 -l 或 \u0026ndash;file-with-matches : 列出文件内容符合指定的样式的文件名称。 -L 或 \u0026ndash;files-without-match : 列出文件内容不符合指定的样式的文件名称。 -n 或 \u0026ndash;line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。 -o 或 \u0026ndash;only-matching : 只显示匹配PATTERN 部分。 -q 或 \u0026ndash;quiet或\u0026ndash;silent : 不显示任何信息。 -r 或 \u0026ndash;recursive : 此参数的效果和指定\u0026rdquo;-d recurse\u0026quot;参数相同。 -s 或 \u0026ndash;no-messages : 不显示错误信息。 -v 或 \u0026ndash;invert-match : 显示不包含匹配文本的所有行。 -V 或 \u0026ndash;version : 显示版本信息。 -w 或 \u0026ndash;word-regexp : 只显示全字符合的列。 Ubuntu问题集锦 1. bash环境问题 全编或者单编./tclmake的时候，一开始就出现错误，可能是当前处于dash而非bash，此时需要查看一下：\nls -al /bin/sh // 查看当前的shell环境 sudo dpkg-reconfigure dash // 配置为bash的方法一（弹窗选择“否”） sudo ln -fs /bin/bash /bin/sh // 配置为bash的方法二 2. 远程操作服务器 Ubuntu14.04下，安装了 sshfs 的情况，可以执行以下命令：\n登录远程服务器：ssh user@10.8.0.9 挂载远程磁盘：sshfs user@10.8.0.9:/home/user/ ./114/ 取消挂载：sudo umount ./114 Ubuntu 首次开启ssh服务：\napt-get update：根据需要更新软件源 apt-get install openssh-server：安装openssh-server ps -e | grep sshd：查看sshd服务启动 service ssh start：开启sshd服务 3. Ubuntu的环境变量 环境变量的作用：一般可以为常用的应用设置PATH，即可通过命令行启动。\n设置环境变量文件一般有bashrc和profile文件，两者的区别：\n/etc/profile，/etc/bashrc是系统全局环境变量设定 ~/.profile，~/.bashrc是用户目录下的私有环境变量设定 读取顺序:\n读取所有用户的全局环境变量设定档/etc/profile，然后读取整个系统的环境设定档/etc/environment 读取当前用户的环境变量设定档~/.profile 更新profile使其生效：source /etc/profile\n环境变量小记录：\nPATH变量的文件定义位置：/etc/environment 添加可执行路径到PATH上，如：export PATH=/local/tools/repo:$PATH 打印出PATH的值（这里用换行替代已有的冒号:）：echo $PATH | tr ':' '\\n' 4. 更新软件后图标变为问号的处理方法 一般设置快捷方式的路径有：/usr/share/applications和~/.local/share/applications\n而图标变为问号一般是缺少Icon路径造成的，下面以Firefox为例。\n在/usr/share/applications上，内容为：\n[Desktop Entry] Name=firefox Comment=firefox Exec=/local/programs/firefox Icon=/local/programs/firefox/browser/chrome/icons/default/default128.png Terminal=false Type=Application Categories=Application 在~/.local/share/applications上，内容为：\n[Desktop Entry] Encoding=UTF-8 Version=1.0 Type=Application NoDisplay=true Icon=/local/programs/firefox/browser/chrome/icons/default/default128.png Exec=/local/programs/firefox/firefox-bin %u Name=Firefox Comment=Custom definition for Firefox 5. Ubuntu开机自动挂载硬盘 具体的步骤：\nsudo fdisk -l：查看当前的硬盘信息 sudo mount [硬盘地址] [挂载目录]：挂载某个硬盘到挂载目录上 sudo blkid [硬盘地址]：查看硬盘UUID、type等信息 sudo vim /etc/fstab：在文本末添加新的一行，格式：UUID=[UUID-value] [挂载目录] [硬盘类型] defaults 0 2 ","permalink":"/posts/os/linux/","summary":"\u003ch2 id=\"简要概述\"\u003e简要概述\u003c/h2\u003e\n\u003ch3 id=\"1-启动过程\"\u003e1. 启动过程\u003c/h3\u003e\n\u003cp\u003eLinux系统的启动过程可以分为5个阶段：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内核的引导\u003c/li\u003e\n\u003cli\u003e运行 init\u003c/li\u003e\n\u003cli\u003e系统初始化\u003c/li\u003e\n\u003cli\u003e建立终端\u003c/li\u003e\n\u003cli\u003e用户登录系统\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e启动流程图:\u003c/p\u003e\n\u003cpre class=\"mermaid\"\u003egraph LR\nsystem(操作系统)\nboot(/boot)\ninit(init进程)\nrun(运行级别)\netc(/etc/init.d)\nuser(用户登录)\nshell(Login shell)\n\nsystem --\u003e boot\nboot --\u003e init\ninit --\u003e run\nrun --\u003e etc\netc --\u003e user\nuser --\u003e shell\n\u003c/pre\u003e\n\u003ch3 id=\"2-目录结构\"\u003e2. 目录结构\u003c/h3\u003e\n\u003cp\u003e登录系统后，在当前命令窗口下输入命令：\u003ccode\u003els /\u003c/code\u003e\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e根目录文件夹及文件\u003c/th\u003e\n          \u003cth\u003e描述\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/bin\u003c/td\u003e\n          \u003ctd\u003ebin是Binary的缩写, 这个目录存放着最经常使用的命令\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/boot\u003c/td\u003e\n          \u003ctd\u003e存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/dev\u003c/td\u003e\n          \u003ctd\u003edev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/etc\u003c/td\u003e\n          \u003ctd\u003e用来存放所有的系统管理所需要的配置文件和子目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/home\u003c/td\u003e\n          \u003ctd\u003e用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/lib\u003c/td\u003e\n          \u003ctd\u003e存放着系统最基本的动态连接共享库，其作用类似于Windows里的dll文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/lost+found\u003c/td\u003e\n          \u003ctd\u003e一般情况下是空的，当系统非法关机后，这里就存放了一些文件\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/media\u003c/td\u003e\n          \u003ctd\u003elinux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/mnt\u003c/td\u003e\n          \u003ctd\u003e系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/opt\u003c/td\u003e\n          \u003ctd\u003e给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/proc\u003c/td\u003e\n          \u003ctd\u003e这个目录的内容不在硬盘上而是在内存里 ,是一个虚拟的目录它是系统内存的映射，可以通过直接访问这个目录来获取系统信息\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/root\u003c/td\u003e\n          \u003ctd\u003e该目录为系统管理员，也称作超级权限者的用户主目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/sbin\u003c/td\u003e\n          \u003ctd\u003es就是Super User的意思，这里存放的是系统管理员使用的系统管理程序\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/srv\u003c/td\u003e\n          \u003ctd\u003e该目录存放一些服务启动之后需要提取的数据\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/sys\u003c/td\u003e\n          \u003ctd\u003e系统文件夹\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/tmp\u003c/td\u003e\n          \u003ctd\u003e这个目录是用来存放一些临时文件的\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/usr\u003c/td\u003e\n          \u003ctd\u003e这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录\u003cbr/\u003e/usr/bin：系统用户使用的应用程序\u003cbr/\u003e/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序\u003cbr/\u003e/usr/src：内核源代码默认的放置目录\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e/var\u003c/td\u003e\n          \u003ctd\u003e这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"3-文件权限管理\"\u003e3. 文件权限管理\u003c/h3\u003e\n\u003cp\u003eLinux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。 \u003cbr\u003e\n在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：\u003c/p\u003e","title":"Linux使用介绍"},{"content":"1. 概述 Git的本地区域可以划分为如下几个部分：\n工作目录（Working Directory） 暂存目录（也叫做索引，Index) 本地仓库（Repository） 2. 基本用法 2.0 常用操作 查找某个字串：git grep -nir [word-regexp]\n基于当前分支创建新分支，并创建对应远程分支与之关联\n基于当前分支创建并切换分支：git checkout -b [branch] 创建新的远程分支：git push origin [branch] 本地分支与远程分支相互关联：git branch --set-upstream-to=origin/\u0026lt;remote_branch\u0026gt; \u0026lt;local_branch\u0026gt; 为当前工程配置本地的用户名和邮箱：\ngit config --local user.name \u0026#34;user\u0026#34; git config --local user.email \u0026#34;user@example.com\u0026#34; 全局的文件过滤配置：git config --global core.excludesfile [全局的.gitignore文件]\n全局的钩子目录配置：git config --global core.hookspath [全局的钩子目录位置.git/hooks]\n迁移仓库内所有分支及tag到另一个远程空仓库里\n1.本地创建远程分支：git branch -r | grep -v \u0026#39;\\-\u0026gt;\u0026#39; | while read remote; do git branch --track \u0026#34;${remote#origin/}\u0026#34; \u0026#34;$remote\u0026#34;; done 2.将本地所有分支与远程保持同步: git fetch --all \u0026amp;\u0026amp; git pull --all 3.移除之前的origin：git remote remove origin 4.绑定现有的origin：git remote add origin [new_repo.git] 5.提交所有分支代码: git push -u origin --all \u0026amp;\u0026amp; git push -u origin --tags 为release分支进行tag操作\n1. 切换到对应的release分支 2. 创建本地的tag：git tag [tag-name] -m [message] 3. 推送tag到远程：git push origin [tag-name] 4. 切回develop分支，检查当前tag：git describe 5. [可选]查看tab列表信息：git show-ref --tags 2.1 区域跳转 git add [files] ：把当前文件放入暂存区域。 git commit -m [comment] ：给暂存区域生成快照并提交到本地仓库。 git reset [files] ：用来撤销最后一次执行git add操作的文件 git reset : 撤销所有add到暂存区域的修改 git checkout [files] ：把文件从暂存区域复制到工作目录，用来丢弃本地修改。 git commit -a ：相当于运行 git add 把所有当前目录下的文件加入暂存区域再运行。git commit. git checkout HEAD -- files ：回滚到复制最后一次提交。 2.2 diff命令 git diff ：工作区和暂存区的差异 git diff HEAD ：工作区和本地仓库的差异 git diff --cached ：暂存区和本地仓库的差异 git diff [commit-id] ：工作区和某个已提交的commit版本的差异 git diff [file] : 工作区中的这个file和暂存区对应file的差异 2.3 草稿处理 git stash : 保存最近一次的修改 git stash pop : 将最近一次修改恢复到工作区里 git stash save [save_name] : 暂时保存文件 git stash drop : 丢弃最近一次保存的修改 git stash list : 显示保存的stash列表 git stash show stash@{n} : 显示保存的第n个stash下修改的文件状态 git stash pop stash@{n} : 恢复第n个stash的文件状态到工作区上 git stash drop stash@{n} : 丢弃第n个保存的修改 git clean -nfd：查看将被移除的untracked 的目录及其文件 git clean -fd：移除untracked的目录及其文件 一般而言，stash@{n}中n越小，表征越晚加入到stash，也就是越新，stash@{0}就是最近一次加入的stash标签。\n2.4 查看历史 git log ：查看当前分支的所有log git log -[n]：查看当前分支最近的n条记录 git log --before [yyyy-MM-dd]u[HH:mm:ss]：查看当前分支在某个时间节点前的所有log记录 git log --after [yyyy-MM-dd]u[HH:mm:ss]：查看当前分支在某个时间节点后的所有log记录 git log --grep [keyword]：根据关键词查询当前分支对应的log记录 git show [commit_id] : 查看当前分支某个提交记录的详情内容 git log --follow [file] : 查看当前分支某个文件的所有提交记录 git log -p [file] : 查看当前分支某个文件的所有提交记录和修改内容 git reflog : 查看对本地仓库的操作记录 git branch -v ：查看当前分支的最新提交的节点信息 git blame [file_path] -L [start-line],[end-line]：查看某个文件起始行到结束行中每行的修改记录 2.5 时光反转 git reset [commit_id] : 混合模式，撤销在此[commit_id]后的所有提交，但保留工作区的修改 git revert [commit_id] : 回退某次[commit_id]的提交，并自动commit此操作。加-n可不自动提交 git reset --soft [commit_id] : 软恢复模式，撤销在此[commit_id]后的所有提交，保留工作区和暂存区的修改 git reset --hard [commit_id] : 硬恢复模式，撤销在此[commit_id]后的所有提交，修改全不保留 2.6 分支操作 git branch [branch_name] : 创建分支 git branch [branch_name] [tag_name]：基于某个tag创建分支 git checkout [branch_name] : 切换分支 git checkout -b [branch_name] : 创建并切换到新建的分支 git merge [branch_name] ：合并某分支到当前分支 git checkout -b [branch_name] origin/[branch_name] ：在本地创建和远程分支对应的分支 git branch --set-upstream-to=origin/[remote_branch] [local_branch] ：建立本地分支和远程分支的关联 git branch --unset-upstream：移除当前分支与远程分支的关联 git branch --track [branch-name] origin/[branch_name]：创建本地分支并与远程分支的关联 git rebase 把分叉的提交历史“整理”成一条直线 git branch -d [branch_name] ： 删除本地分支 git branch -D [branch_name] ： 强制删除本地分支 git cherry-pick [commit_id] ：复制另一分支[commit_id]的提交内容到当前分支，合并多条提交记录可用空格隔开 git cherry-pick [commit_id start]..[commit_id end] ：复制另一分支下某个范围下的所有提交内容到当前分支，用..连接 2.7 远程仓库 git remote -v：查看当前远程仓库的拉取和上传信息 git remote show origin：查看某个远程仓库信息，一般名称为origin git remote add origin [仓库地址].git：关联一个远程库 git remote set-url origin [仓库地址].git：更换远程仓库地址 git push -u origin [branch] ：第一次推送[branch]分支的所有内容 git push origin [branch_name] ：创建一个远程分支 git push origin --delete [remote_branch] : 删除远程分支 git branch -u origin/[branch_name] [branch_name]：将本地分支与远程分支相关联 git clone *.git ：克隆远程仓库 git clone *.git -b [branch_name]：克隆远程仓库中[branch_name]的代码 ssh -T git@github.com： 检查是否连接得上Github 2.8 tag操作 git tag：列出所有的tag git tag -l v1.0.0*：列出以v1.0.0开头的tag git tag -a [tag_name] -m [tag_msg]：创建一个附注tag git tag [tag_name]：创建一个轻量的tag git tag [tag_name] [commit_id]：为某次提交创建tag git push origin [tag_name]：上传某个tag到远程仓库 git push origin --tags：上传所有tag到远程仓库 git tag -d [tag_name]：本地删除某个tag git push origin --delete [tag_name]：删除远程仓库的某个tag git checkout [tag_name]：切换到某个tag位置，注意与当前HEAD分离了 git branch [new-branch-name] [tag-name]：基于某个tag创建新分支 3. 过滤规则 过滤规则简单说明\n# 表示此为注释,将被Git忽略 *.a 表示忽略所有 .a 结尾的文件 !lib.a 表示但lib.a除外 /TODO 表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ 表示忽略 build/目录下的所有文件，过滤整个build文件夹； doc/*.txt 表示会忽略doc/notes.txt但不包括 doc/server/arch.txt bin/: 表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件 /bin: 表示忽略根目录下的bin文件 /*.c: 表示忽略cat.c，不忽略 build/cat.c debug/*.obj: 表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj **/foo: 表示忽略/foo,a/foo,a/b/foo等 a/**/b: 表示忽略a/b, a/x/b,a/x/y/b等 !/bin/run.sh 表示不忽略bin目录下的run.sh文件 *.log: 表示忽略所有 .log 文件 config.php: 表示忽略当前路径的 config.php 文件 /mtk/ 表示过滤整个文件夹 *.zip 表示过滤所有.zip文件 /mtk/do.c 表示过滤某个具体文件 被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。 需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下： !*.zip !/mtk/one.txt ","permalink":"/posts/tools/git/","summary":"\u003ch3 id=\"1-概述\"\u003e1. 概述\u003c/h3\u003e\n\u003cp\u003eGit的本地区域可以划分为如下几个部分：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e工作目录（Working Directory）\u003c/li\u003e\n\u003cli\u003e暂存目录（也叫做索引，Index)\u003c/li\u003e\n\u003cli\u003e本地仓库（Repository）\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"2-基本用法\"\u003e2. 基本用法\u003c/h3\u003e\n\u003ch4 id=\"20-常用操作\"\u003e2.0 常用操作\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e查找某个字串：\u003ccode\u003egit grep -nir [word-regexp]\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e基于当前分支创建新分支，并创建对应远程分支与之关联\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e基于当前分支创建并切换分支：git checkout -b [branch]\n创建新的远程分支：git push origin [branch]\n本地分支与远程分支相互关联：git branch --set-upstream-to=origin/\u0026lt;remote_branch\u0026gt; \u0026lt;local_branch\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e为当前工程配置本地的用户名和邮箱：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit config --local user.name \u0026#34;user\u0026#34;\ngit config --local user.email \u0026#34;user@example.com\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e全局的文件过滤配置：\u003ccode\u003egit config --global core.excludesfile [全局的.gitignore文件]\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e全局的钩子目录配置：\u003ccode\u003egit config --global core.hookspath [全局的钩子目录位置.git/hooks]\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e迁移仓库内所有分支及tag到另一个远程空仓库里\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e1.本地创建远程分支：git branch -r \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -v \u003cspan class=\"s1\"\u003e\u0026#39;\\-\u0026gt;\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e remote\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e git branch --track \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eremote\u003c/span\u003e\u003cspan class=\"p\"\u003e#origin/\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$remote\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e2.将本地所有分支与远程保持同步: git fetch --all \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git pull --all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e3.移除之前的origin：git remote remove origin\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e4.绑定现有的origin：git remote add origin \u003cspan class=\"o\"\u003e[\u003c/span\u003enew_repo.git\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e5.提交所有分支代码: git push -u origin --all \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e git push -u origin --tags\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e为release分支进行tag操作\u003c/p\u003e","title":"Git入门介绍"},{"content":"简述 adb日志操作 adb logcat日志可分为：main、system、events、radio、crash、kernel类型的log，常用日志过滤命令如下：\nadb logcat -b main adb logcat -b system adb logcat -b events adb logcat -b radio adb logcat -b crash adb logcat -b kernel logcat其它命令补充：\nadb logcat -b events：输出指定buffer的log adb logcat -s \u0026ldquo;ActivityManager\u0026rdquo;：输出指定tag的log adb logcat -L：上次重启时的log adb logcat -f [file_path]：将log保存到指定文件 adb logcat -g：缓冲区大小 adb logcat -S：log统计信息 adb shell setprop log.tag.[Tag] {VDIWE}：设置log标签的过滤级别 dmesg或者cat /proc/kmsg：adb shell进入手机后打印内核日志 adb logcat -b events | egrep -i resume_activity：查看执行到resume状态的activity 从Android O开始引入Log的chatty机制，会把中间的重复内容不再打印，而是输出类似 “uid=1000(system) Binder:1453_1D identical 7 lines” ，告知有多少行的日志是一样的，这不是错误，只是减少了重复打印的次数。\n1. event log EventLog.java通过writeEvent方法写入Android事件的log。对应的文件为EventLogTags.logtag，并且这个文件有多个。具体可在framework源码中搜索。\nam下的EventLogTags.logtag：\noption java_package com.android.server.am # 启动一个组件，包含Activity、Service、Broadcast、ContentProvide等，可看Type类型 30014 am_proc_start (User|1|5),(PID|1|5),(UID|1|5),(Process Name|3),(Type|3),(Component|3) # 启动的进程 30010 am_proc_bound (User|1|5),(PID|1|5),(Process Name|3) # 完全退出或者击杀掉一个应用 30023 am_kill (User|1|5),(PID|1|5),(Process Name|3),(OomAdj|1|5),(Reason|3) # 当某个服务因其应用程序空闲而被强行停止时 30056 am_stop_idle_service (UID|1|5),(Component Name|3) # ActivityManagerService.systemReady() 表征AMS已经就绪 3040 boot_progress_ams_ready (time|2|3) # ActivityManagerService calls enableScreenAfterBoot()，这个阶段说明用户可以使用手机 3050 boot_progress_enable_screen (time|2|3) # 配置发生变化，如横竖屏切换、语言切换等 2719 configuration_changed (config mask|1|5) # 应用发生未响应 30008 am_anr (User|1|5),(pid|1|5),(Package Name|3),(Flags|1|5),(reason|3) # 应用发生异常，导致crash了 30039 am_crash (User|1|5),(PID|1|5),(Process Name|3),(Flags|1|5),(Exception|3),(Message|3),(File|3),(Line|1|5) # 汇报系统的GC的信息 30046 am_meminfo (Cached|2|2),(Free|2|2),(Zram|2|2),(Kernel|2|2),(Native|2|2) # 汇报该进程的GC信息 30047 am_pss (Pid|1|5),(UID|1|5),(Process Name|3),(Pss|2|2),(Uss|2|2),(SwapPss|2|2) # 当uid的任何进程开始运行时 30052 am_uid_running (UID|1|5) # uid的运行状态为active 30054 am_uid_active (UID|1|5) # uid的运行状态为stopped 30053 am_uid_stopped (UID|1|5) # 当uid的状态变为空闲时（强制执行后台检查）。 30055 am_uid_idle (UID|1|5) 位置：frameworks/base/services/core/java/com/android/server/EventLogTags.logtags server包中的EventLogTags.logtag：\noption java_package com.android.server # --------------------------- # NotificationManagerService.java # --------------------------- # 当调用NotificationManager.notify方法时打印此log。 status: 0=post, 1=update, 2=ignored 2750 notification_enqueue (uid|1|5),(pid|1|5),(pkg|3),(id|1|5),(tag|3),(userid|1|5),(notification|3),(status|1) # 当有人试图取消通知时，通知管理器有时也会使用标志来调用它 2751 notification_cancel (uid|1|5),(pid|1|5),(pkg|3),(id|1|5),(tag|3),(userid|1|5),(required_flags|1),(forbidden_flags|1),(reason|1|5),(listener|3) # 当有人试图取消特定包的所有通知时 2752 notification_cancel_all (uid|1|5),(pid|1|5),(pkg|3),(userid|1|5),(required_flags|1),(forbidden_flags|1),(reason|1|5),(listener|3) # 显示通知面板时，items代表的是通知面板里通知的数量 27500 notification_panel_revealed (items|1) # 当通知面板被隐藏时，会打印此log 27501 notification_panel_hidden # 当通知展开状态或者签约改变时 27511 notification_expansion (key|3),(user_action|1),(expanded|1),(lifespan|1),(freshness|1),(exposure|1) # 当通知被点击时 27520 notification_clicked (key|3),(lifespan|1),(freshness|1),(exposure|1) # 当通知的action类button被点击时 27521 notification_action_clicked (key|3),(action_index|1),(lifespan|1),(freshness|1),(exposure|1) # 当通知已经被取消时 27530 notification_canceled (key|3),(reason|1),(lifespan|1),(freshness|1),(exposure|1),(listener|3) # 当通知新显示在屏幕上或从屏幕上消失时 27531 notification_visibility (key|3),(visibile|1),(lifespan|1),(freshness|1),(exposure|1),(rank|1) # 通知发出声音，振动或闪烁 27532 notification_alert (key|3),(buzz|1),(beep|1),(blink|1) 上面暂时收录了NotificationManagerService相关的event log\nlogging的EventLogTags.logtag：\noption java_package com.android.internal.logging; # 交互事件的log 524287 sysui_view_visibility (category|1|5),(visible|1|6) 524288 sysui_action (category|1|5),(pkg|3) 524292 sysui_multi_action (content|4) 524290 sysui_count (name|3),(increment|1) 524291 sysui_histogram (name|3),(bucket|1) # 系统文件时记录的通用事件 525000 commit_sys_config_file (name|3),(time|2|3) tags格式定位位置：system/core/logcat/event.logtags\n我们注意到括号内有很多数字，因此有必要对数据单位和数据值进行简要说明。\n一般格式：(|data type[|data unit])\n数据类型有：\n1: int 2: long 3: string 4: list 数据单位有：\n1: Number of objects（对象个数） 2: Number of bytes（字节数） 3: Number of milliseconds（毫秒数） 4: Number of allocations（分配个数） 5: Id 6: Percent（百分比）s 写入Event日志：EventLog.writeEvent()\n2. system log system log的一般由Slog.java打印出来，其常用的打印实现是调用Log.println_native方法。Slog基本由系统服务使用。\nadb常用操作 1. 常用命令 屏幕截图：adb shell screencap -p /sdcard/filename.png\n录制屏幕（默认录制时间180s）：adb shell screenrecord /sdcard/filename.mp4\n查看输入事件：adb shell getevent -l\n查看应用中运行的服务：adb shell dumpsys activity services [package_name]\n清除数据和缓存：adb shell pm clear [package_name]\n查看应用详细信息：adb shell dumpsys package [package_name]\n查看前台应用：adb shell dumpsys activity activities | grep mResumedActivity\n查看内存占用信息：adb shell dumpsys meminfo [package]\n查看CPU信息：adb shell dumpsys cpuinfo [package]\n生成hprof文件：adb shell am dumpheap [package] [mobile_path/hprof_name.hprof]\n生成Bugreport报告：adb bugreport \u0026gt; [pc_path/bugreport.txt]\n查看系统输入信息：adb shell dumpsys input\n监听操作事件：adb shell uiautomator events\nmonkey命令：adb shell monkey -s 10 --pct-touch 30 --throttle 300 -p [包名] -v [次数] --monitor-native-crashes\n通知指定位置媒体刷新：adb shell am broadcast -a android.intent.action.MEDIA_SCANNER_SCAN_FILE -d file:///sdcard/Pictures\n无线调试：\n无线调试配对：adb pair [ip]:[port] 无线调试连接：adb connect [ip]:[port] Binder调用堆栈打印\n打开IPC打印：adb shell am trace-ipc start 执行应用操作或者等待 停止IPC打印并输出成文件：adb shell am trace-ipc stop --dump-file /data/local/tmp/ipc-trace.txt 拉取IPC的trace文件到当前文件夹：adb pull /data/local/tmp/ipc-trace.txt 2. 读写系统配置 adb可以读取或者写入Settings和SystemProperties值。其中系统属性存在于system/build.prop 文件。\nSettings配置值相关操作有：\nadb shell settings list {system, secure, global}：查看settings属性值列表\nadb shell settings：查看settings的帮助，此时控制台打印内容如下：\nSettings provider (settings) commands: help Print this help text. get [--user \u0026lt;USER_ID\u0026gt; | current] NAMESPACE KEY Retrieve the current value of KEY. put [--user \u0026lt;USER_ID\u0026gt; | current] NAMESPACE KEY VALUE [TAG] [default] Change the contents of KEY to VALUE. TAG to associate with the setting. {default} to set as the default, case-insensitive only for global/secure namespace delete [--user \u0026lt;USER_ID\u0026gt; | current] NAMESPACE KEY Delete the entry for KEY. reset [--user \u0026lt;USER_ID\u0026gt; | current] NAMESPACE {PACKAGE_NAME | RESET_MODE} Reset the global/secure table for a package with mode. RESET_MODE is one of {untrusted_defaults, untrusted_clear, trusted_defaults}, case-insensitive list [--user \u0026lt;USER_ID\u0026gt; | current] NAMESPACE Print all defined keys. NAMESPACE is one of {system, secure, global}, case-insensitive SystemProperties配置值的操作格式：\nadb shell getprop：查看SystemProperties属性值列表 adb shell getprop [key]：查看系统某个属性值的方法 adb shell setprop [key] [value]：设置某个系统属性 查看设备信息：\n设备型号：adb shell getprop ro.product.model\n设备品牌：adb shell getprop ro.product.brand\n设备处理器型号：adb shell getprop ro.product.board\n设备安卓版本号：adb shell getprop ro.build.version.release\n设备引擎渲染模式：adb shell dumpsys SurfaceFlinger|grep -i \u0026ldquo;GLES\u0026rdquo;\n3. dumpsys操作集合 通过dumpsys命令查询系统服务的运行状态(对象的成员变量属性值)\n一般格式：adb shell dumpsys [...]\n查询当前系统所支持的dump服务：adb shell dumpsys -l 查询dump的服务及对应类名：adb shell service list 1. dumpsys activity 查询AMS服务相关信息，可跟不同的参数\n使用activity的帮助命令： adb shell dumpsys activity -h\n可知其格式为： adb shell dumpsys activity [-a] [-c] [-p PACKAGE] [-h] [WHAT] ...\n下面是对相关参数的解析:\n-a: include all available server state. -c: include client state. -p: limit output to given package. WHAT may be one of: a[ctivities]: activity stack state r[recents]: recent activities state b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state broadcast-stats [PACKAGE_NAME]: aggregated broadcast statistics i[ntents] [PACKAGE_NAME]: pending intent state p[rocesses] [PACKAGE_NAME]: process state o[om]: out of memory management perm[issions]: URI permission grant state prov[iders] [COMP_SPEC ...]: content provider state provider [COMP_SPEC]: provider client-side state s[ervices] [COMP_SPEC ...]: service state as[sociations]: tracked app associations settings: currently applied config settings service [COMP_SPEC]: service client-side state package [PACKAGE_NAME]: all state related to given package all: dump all activities top: dump the top activity WHAT may also be a COMP_SPEC to dump activities. COMP_SPEC may be a component name (com.foo/.myApp), a partial substring in a component name, a hex object identifier. 2. dumpsys package 查询PMS服务相关信息，可跟不同的参数\n使用package的帮助命令：adb shell dumpsys package -h\n可知其使用格式如下：adb shell dumpsys package [-h] [-f] [--checkin] [cmd] ...\n下面是对相关参数的解析：\n[-h] [-f] [--checkin] [cmd] ... --checkin: dump for a checkin -f: print details of intent filters -h: print this help [cmd] may be one of: l[ibraries]: list known shared libraries f[eatures]: list device features k[eysets]: print known keysets r[esolvers] [activity|service|receiver|content]: dump intent resolvers perm[issions]: dump permissions permission [name ...]: dump declaration and use of given permission pref[erred]: print preferred package settings preferred-xml [--full]: print preferred package settings as xml prov[iders]: dump content providers p[ackages]: dump installed packages s[hared-users]: dump shared user IDs m[essages]: print collected runtime messages v[erifiers]: print package verifier info d[omain-preferred-apps]: print domains preferred apps i[ntent-filter-verifiers]|ifv: print intent filter verifier info version: print database version info write: write current settings now installs: details about install sessions check-permission \u0026lt;permission\u0026gt; \u0026lt;package\u0026gt; [\u0026lt;user\u0026gt;]: does pkg hold perm? dexopt: dump dexopt state compiler-stats: dump compiler statistics enabled-overlays: dump list of enabled overlay packages \u0026lt;package.name\u0026gt;: info about given package 3. dumpsys window 查询WMS服务相关信息，可跟不同的参数\n使用window的帮助命令：adb shell dumpsys window -h\n可知其使用格式如下：adb shell dumpsys window [-a] [-h] [cmd] ...\n下面是对相关参数的解析：\n[-a] [-h] [cmd] ... [cmd] may be one of: l[astanr]: last ANR information p[policy]: policy state a[animator]: animator state s[essions]: active sessions surfaces: active surfaces (debugging enabled only) d[isplays]: active display contents t[okens]: token list w[indows]: window list [cmd] may also be a NAME to dump windows. NAME may be a partial substring in a window name, a Window hex object identifier, or \u0026#34;all\u0026#34; for all windows, or \u0026#34;visible\u0026#34; for the visible windows. \u0026#34;visible-apps\u0026#34; for the visible app windows. -a: include all available server state. 4. dumpsys battery 查询BatteryService相关信息，可跟不同的参数\n使用battery的帮助命令：adb shell dumpsys battery -h\n可知其使用格式如下：adb shell dumpsys battery [cmd]\n下面是对相关参数的解析：\n[cmd] may be one of: help Print this help text. set [-f] [ac|usb|wireless|status|level|temp|present|invalid] \u0026lt;value\u0026gt; Force a battery property value, freezing battery state. -f: force a battery change broadcast be sent, prints new sequence. unplug [-f] Force battery unplugged, freezing battery state. -f: force a battery change broadcast be sent, prints new sequence. reset [-f] Unfreeze battery state, returning to current hardware values. -f: force a battery change broadcast be sent, prints new sequence. adb问题集锦 在手机充电模式下使用adb命令\n解决adb运行遇到的insufficient permissions for device的错误，使其在充电状态运行adb命令\n新建android.rules文本文件，加入以下内容：\nSUBSYSTEM==\u0026#34;usb\u0026#34;, ENV{DEVTYPE}==\u0026#34;usb_device\u0026#34;, MODE=\u0026#34;0666\u0026#34; 将该文件移动到 /etc/udev/rules.d 目录（Ubuntu系统）\n设置adb的TCP端口号\n解决adb connect无法连接Android设备，通过排查发现，这可能是adbd后台进程没监听相关端口引起的，解决方案如下：\n在有root权限基础上，检查adbd进程是否存在，执行命令 ps | grep adbd 如果输出里没有发现adbd进程，则执行 start adbd 手动启动监听进程，然后重试看看能不能连接 如果有该进程或者依然无法连接，则先执行 stop adbd 关闭监听进程 执行 setprop service.adb.tcp.port [port] 重置监听端口 执行 start adbd 重启监听进程，这时候执行 netstat –apn 查看监听的端口 回到PC进行连接，adb connect IP地址[:端口号] 如果依然不能连接，需要排除PC端的问题，在PC上执行 adb kill-server 然后重试 ","permalink":"/posts/tools/adb/","summary":"\u003ch2 id=\"简述\"\u003e简述\u003c/h2\u003e\n\u003ch2 id=\"adb日志操作\"\u003eadb日志操作\u003c/h2\u003e\n\u003cp\u003eadb logcat日志可分为：main、system、events、radio、crash、kernel类型的log，常用日志过滤命令如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eadb logcat -b main\u003c/li\u003e\n\u003cli\u003eadb logcat -b system\u003c/li\u003e\n\u003cli\u003eadb logcat -b events\u003c/li\u003e\n\u003cli\u003eadb logcat -b radio\u003c/li\u003e\n\u003cli\u003eadb logcat -b crash\u003c/li\u003e\n\u003cli\u003eadb logcat -b kernel\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003elogcat其它命令补充：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eadb logcat -b events：输出指定buffer的log\u003c/li\u003e\n\u003cli\u003eadb logcat -s \u0026ldquo;ActivityManager\u0026rdquo;：输出指定tag的log\u003c/li\u003e\n\u003cli\u003eadb logcat -L：上次重启时的log\u003c/li\u003e\n\u003cli\u003eadb logcat -f [file_path]：将log保存到指定文件\u003c/li\u003e\n\u003cli\u003eadb logcat -g：缓冲区大小\u003c/li\u003e\n\u003cli\u003eadb logcat -S：log统计信息\u003c/li\u003e\n\u003cli\u003eadb shell setprop log.tag.[Tag] {VDIWE}：设置log标签的过滤级别\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edmesg\u003c/code\u003e或者\u003ccode\u003ecat /proc/kmsg\u003c/code\u003e：adb shell进入手机后打印内核日志\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eadb logcat -b events | egrep -i resume_activity\u003c/code\u003e：查看执行到resume状态的activity\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e从Android O开始引入Log的chatty机制，会把中间的重复内容不再打印，而是输出类似 “uid=1000(system) Binder:1453_1D identical 7 lines” ，告知有多少行的日志是一样的，这不是错误，只是减少了重复打印的次数。\u003c/p\u003e","title":"adb日常使用"},{"content":"安装Hugo 不同系统环境安装命令：\n# Ubuntu 环境 ## apt方式。下载版本可能会旧一些 sudo apt update sudo apt install hugo ## deb包方式 uname -i # 64位：x86_64；32位：i686 sudo dpkg -i hugo*.deb # Mac 环境 brew install hugo 查看HUGO版本确认安装成功：\nhugo version 快速开始 可参考文档：Hugo快速入门\nhugo 创建站点： # 说明：my-site 是站点的名称 hugo new site my-site 创建完成后，站点目录 包含以下文件：\n. ├── archetypes/ │ └── default.md \u0026lt;-- default.md是默认的博文模版 ├── assets/ \u0026lt;-- 存放被 Hugo Pipes 处理的文件 ├── content/ \u0026lt;-- 存放markdown文件作为博文内容 ├── data/ \u0026lt;-- 存放 Hugo 处理的数据 ├── i18n/ ├── layouts/ ├── static/ \u0026lt;-- 存放静态文件,例如 图片 CSS JS文件 ├── themes/ \u0026lt;-- 存放不同的主题 └── config.yaml \u0026lt;-- site configuration 创建文章 hugo new content/posts/hugo_intro.md # 指定模板创建内容 hugo new --kind \u0026lt;template\u0026gt; \u0026lt;name\u0026gt; 设置主题（子模块形式） git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) # 重新clone，需要初始化子模块，等同于上面的复合命令 git submodule init git submodule update 这里使用的主题为：PaperMod\n本地运行测试 # 支持草稿态展示，默认端口号 1313 hugo server -D 正式发布 当进入到正式发布时，在调整确认config.yaml / config.toml 文件下的 baseURL 字段值后。 执行以下命令即可正式发布：\nhugo 使用入门 当前配置的目录菜单列表如下：\nmenu: main: - name: 首页 url: / weight: 1 - name: 文章 url: /posts/ weight: 2 - name: 分类 url: /categories/ weight: 3 - name: 标签 url: /tags/ weight: 4 - name: 归档 url: /archives/ weight: 5 - name: 关于 url: /about/ weight: 6 1. 分类与标签 在 config.yaml 文件里打开分类与标签功能：\ntaxonomies: tag: tags category: categories 在archetypes/default.md默认博文模版里新增属性定义：\ncategories: - \u0026#34;未分类\u0026#34; tags: - \u0026#34;未知\u0026#34; 2. 归档 在 content 目录里创建 archive.md文件 此时的目录树如下：\n. ├── config.yaml ├── content/ │ ├── archives.md \u0026lt;--- Create archive.md here │ └── posts/ ├── static/ └── themes/ └── PaperMod/ 接着将以下内容添加到archive.md文件里：\n--- title: \u0026#34;Archive\u0026#34; layout: \u0026#34;archives\u0026#34; url: \u0026#34;/archives/\u0026#34; summary: archives --- 3. 静态资源 Hugo 构建时会自动将 static 目录内容复制到 public 根目录。\n以引用图片为例，在 static 目录下新建子目录（如 images），使用绝对路径直接引用，路径需以 / 开头：\n引用方式：![图片描述](/images/demo.jpg) 部署后的访问地址：https://your-domain.com/images/demo.jpg 4. Mermaid图表 Hugo 目前没有提供 Mermaid 图表的默认模板。可通过以下方法主动配置：\n创建 layouts/_default/_markup/render-codeblock-mermaid.html文件，在该文件添加以下内容：\n\u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} 部署 使用 阿里云服务器配合nginx实现Hugo部署。\n确认 Hugo 的baseURL配置： # 本机IP动态变化，使用相对路径，不指定host baseURL: / 在/etc/nginx/conf.d/目录里新建 hugo-server.conf文件，内容如下： server { listen 9099; server_name 127.0.0.1; # Hugo 生成的静态网站目录 root /home/user/hugo-site/public; index index.html index.htm; # 日志配置 access_log /var/log/nginx/hugo_access.log; error_log /var/log/nginx/hugo_error.log; location / { try_files $uri $uri/ =404; } } 在nginx按需配置访问的端口号与静态网站生成目录。\n注意，添加完成后执行 sudo nginx -s reload 命令刷新配置。\n执行 hugo 进行静态网站打包。完成后外站可使用目标主机地址进行访问 ","permalink":"/posts/hugo_intro/","summary":"\u003ch3 id=\"安装hugo\"\u003e安装Hugo\u003c/h3\u003e\n\u003cp\u003e不同系统环境安装命令：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Ubuntu 环境\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e## apt方式。下载版本可能会旧一些\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt update\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt install hugo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e## deb包方式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euname -i  \u003cspan class=\"c1\"\u003e# 64位：x86_64；32位：i686\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo dpkg -i hugo*.deb\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Mac 环境\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e查看HUGO版本确认安装成功：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"快速开始\"\u003e快速开始\u003c/h3\u003e\n\u003cp\u003e可参考文档：\u003ca href=\"https://hugo.opendocs.io/getting-started/quick-start/\"\u003eHugo快速入门\u003c/a\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ehugo 创建站点：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 说明：my-site 是站点的名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new site my-site\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e创建完成后，站点目录 包含以下文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.\n├── archetypes/\n│   └── default.md    \u0026lt;-- default.md是默认的博文模版\n├── assets/           \u0026lt;-- 存放被 Hugo Pipes 处理的文件\n├── content/          \u0026lt;-- 存放markdown文件作为博文内容\n├── data/             \u0026lt;-- 存放 Hugo 处理的数据\n├── i18n/\n├── layouts/     \n├── static/           \u0026lt;-- 存放静态文件,例如 图片 CSS JS文件\n├── themes/           \u0026lt;-- 存放不同的主题\n└── config.yaml         \u0026lt;-- site configuration\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e创建文章\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new content/posts/hugo_intro.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 指定模板创建内容\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new --kind \u0026lt;template\u0026gt; \u0026lt;name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e设置主题（子模块形式）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule add --depth\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule update --init --recursive \u003cspan class=\"c1\"\u003e# needed when you reclone your repo (submodules may not get cloned automatically)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 重新clone，需要初始化子模块，等同于上面的复合命令\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule init\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit submodule update\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e这里使用的主题为：\u003ca href=\"https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-features/\"\u003ePaperMod\u003c/a\u003e\u003c/p\u003e","title":"Hugo入门使用"},{"content":"从事互联网行业，技术宅\n未完待续\u0026hellip;\n","permalink":"/about/","summary":"关于","title":"关于我"}]